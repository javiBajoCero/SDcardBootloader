
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2c0  0800a2c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2c0  0800a2c0  0001a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c8  0800a2c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2cc  0800a2cc  0001a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a2d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00012474  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20012480  20012480  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001564a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a24  00000000  00000000  00035686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000390b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  0003a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002377f  00000000  00000000  0003b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019982  00000000  00000000  0005e957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb2e2  00000000  00000000  000782d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001435bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044f0  00000000  00000000  0014360c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009dd0 	.word	0x08009dd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08009dd0 	.word	0x08009dd0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <MX_ADC1_Init+0x9c>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_ADC1_Init+0x98>)
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <MX_ADC1_Init+0xa0>)
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_ADC1_Init+0x98>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0x98>)
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_ADC1_Init+0x98>)
 800053e:	f000 fedf 	bl	8001300 <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000548:	f000 fb7c 	bl	8000c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800054c:	2303      	movs	r3, #3
 800054e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_ADC1_Init+0x98>)
 800055e:	f000 ff45 	bl	80013ec <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000568:	f000 fb6c 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	40012000 	.word	0x40012000
 800057c:	0f000001 	.word	0x0f000001

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_ADC_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d127      	bne.n	80005f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6453      	str	r3, [r2, #68]	; 0x44
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_V_DIV_Pin;
 80005da:	2308      	movs	r3, #8
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_V_DIV_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <HAL_ADC_MspInit+0x84>)
 80005ee:	f002 f933 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40012000 	.word	0x40012000
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_ADC_MspDeInit+0x30>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d109      	bne.n	800062e <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_ADC_MspDeInit+0x34>)
 800061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_ADC_MspDeInit+0x34>)
 8000620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000624:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    HAL_GPIO_DeInit(ADC_V_DIV_GPIO_Port, ADC_V_DIV_Pin);
 8000626:	2108      	movs	r1, #8
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <HAL_ADC_MspDeInit+0x38>)
 800062a:	f002 fab1 	bl	8002b90 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000

08000644 <isthereSDcard>:
BootloaderLogicEnum compareRAMbufferwithFlashcontents(char * rambuffer, char * flashbuffer, UINT size);

void deinitEverything();


BootloaderLogicEnum isthereSDcard(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin)==GPIO_PIN_SET){//SD card detected!
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <isthereSDcard+0x20>)
 800064e:	f002 fb9b 	bl	8002d88 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d101      	bne.n	800065c <isthereSDcard+0x18>
		return YES;
 8000658:	2301      	movs	r3, #1
 800065a:	e000      	b.n	800065e <isthereSDcard+0x1a>
	}else{//SD card not detected
		return NO;
 800065c:	2300      	movs	r3, #0
	}
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020400 	.word	0x40020400

08000668 <isThereFirmwarefile>:


BootloaderLogicEnum isThereFirmwarefile(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	//try to mount SD card
	if(isSDcardMounted()==NO){
 800066c:	f000 f81a 	bl	80006a4 <isSDcardMounted>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <isThereFirmwarefile+0x12>
		return NO;
 8000676:	2300      	movs	r3, #0
 8000678:	e010      	b.n	800069c <isThereFirmwarefile+0x34>
	}
	//is there a firmware folder?
	if(isthereafirmwarefolder(directorypath)==NO){
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <isThereFirmwarefile+0x38>)
 800067c:	f000 f846 	bl	800070c <isthereafirmwarefolder>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <isThereFirmwarefile+0x22>
		return NO;
 8000686:	2300      	movs	r3, #0
 8000688:	e008      	b.n	800069c <isThereFirmwarefile+0x34>
	}
	//is there a firmware.bin in that folder?
	if(isthereafirmwarefile(directorypath)==NO){
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <isThereFirmwarefile+0x38>)
 800068c:	f000 f852 	bl	8000734 <isthereafirmwarefile>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <isThereFirmwarefile+0x32>
		return NO;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <isThereFirmwarefile+0x34>
	}
	//is the firmware.bin size bigger than -....

	return YES;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	08009e3c 	.word	0x08009e3c

080006a4 <isSDcardMounted>:

BootloaderLogicEnum isSDcardMounted(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	// Re-initialize SD
	if ( BSP_SD_Init() != MSD_OK ) {
 80006a8:	f005 fcb2 	bl	8006010 <BSP_SD_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <isSDcardMounted+0x12>
	  return NO;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e020      	b.n	80006f8 <isSDcardMounted+0x54>
	}

	// Re-initialize FATFS
	if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 80006b6:	4811      	ldr	r0, [pc, #68]	; (80006fc <isSDcardMounted+0x58>)
 80006b8:	f009 fa7a 	bl	8009bb0 <FATFS_UnLinkDriver>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <isSDcardMounted+0x22>
	  return NO;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e018      	b.n	80006f8 <isSDcardMounted+0x54>
	}
	if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <isSDcardMounted+0x58>)
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <isSDcardMounted+0x5c>)
 80006ca:	f009 fa29 	bl	8009b20 <FATFS_LinkDriver>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <isSDcardMounted+0x34>
	  return NO;
 80006d4:	2300      	movs	r3, #0
 80006d6:	e00f      	b.n	80006f8 <isSDcardMounted+0x54>
	}

	// Mount filesystem
	stat = f_mount(&fs, SDPath, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <isSDcardMounted+0x58>)
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <isSDcardMounted+0x60>)
 80006de:	f008 fb47 	bl	8008d70 <f_mount>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <isSDcardMounted+0x64>)
 80006e8:	701a      	strb	r2, [r3, #0]
	if (stat != FR_OK) {
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <isSDcardMounted+0x64>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <isSDcardMounted+0x52>
		return NO;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <isSDcardMounted+0x54>
	}


	return YES;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20012440 	.word	0x20012440
 8000700:	08009e6c 	.word	0x08009e6c
 8000704:	20000070 	.word	0x20000070
 8000708:	200020d8 	.word	0x200020d8

0800070c <isthereafirmwarefolder>:

BootloaderLogicEnum isthereafirmwarefolder(const TCHAR* path){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if(f_opendir(&directory, path)!=FR_OK){
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <isthereafirmwarefolder+0x24>)
 8000718:	f009 f83f 	bl	800979a <f_opendir>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <isthereafirmwarefolder+0x1a>
		return NO;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <isthereafirmwarefolder+0x1c>
	}
	return YES;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200020dc 	.word	0x200020dc

08000734 <isthereafirmwarefile>:

BootloaderLogicEnum isthereafirmwarefile(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	if(f_findfirst(&directory, &filinfo, directorypath, "*.bin")!=FR_OK
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <isthereafirmwarefile+0x34>)
 800073a:	4a0c      	ldr	r2, [pc, #48]	; (800076c <isthereafirmwarefile+0x38>)
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <isthereafirmwarefile+0x3c>)
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <isthereafirmwarefile+0x40>)
 8000740:	f009 f983 	bl	8009a4a <f_findfirst>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00a      	beq.n	8000760 <isthereafirmwarefile+0x2c>
			&& (filinfo.fsize>0)
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <isthereafirmwarefile+0x3c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <isthereafirmwarefile+0x2c>
			&& (filinfo.fsize<=APPsize)){
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <isthereafirmwarefile+0x3c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800075a:	d801      	bhi.n	8000760 <isthereafirmwarefile+0x2c>
		return NO;
 800075c:	2300      	movs	r3, #0
 800075e:	e000      	b.n	8000762 <isthereafirmwarefile+0x2e>
	}
	return YES;
 8000760:	2301      	movs	r3, #1

}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	08009de8 	.word	0x08009de8
 800076c:	08009e3c 	.word	0x08009e3c
 8000770:	20002114 	.word	0x20002114
 8000774:	200020dc 	.word	0x200020dc

08000778 <doFlashandSDfirmwarecontentsMatch>:

BootloaderLogicEnum doFlashandSDfirmwarecontentsMatch(){
 8000778:	b5b0      	push	{r4, r5, r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	UINT bytesreadfromfile=0;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
	fullfilepath[0]=0;
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
	strcat(fullfilepath,directorypath);
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 800078a:	f7ff fd1d 	bl	80001c8 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 8000794:	4413      	add	r3, r2
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <doFlashandSDfirmwarecontentsMatch+0xc0>)
 8000798:	461c      	mov	r4, r3
 800079a:	4615      	mov	r5, r2
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	6020      	str	r0, [r4, #0]
 80007a0:	6061      	str	r1, [r4, #4]
 80007a2:	60a2      	str	r2, [r4, #8]
 80007a4:	60e3      	str	r3, [r4, #12]
	strcat(fullfilepath,"/");
 80007a6:	4823      	ldr	r0, [pc, #140]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 80007a8:	f7ff fd0e 	bl	80001c8 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 80007b2:	4413      	add	r3, r2
 80007b4:	4921      	ldr	r1, [pc, #132]	; (800083c <doFlashandSDfirmwarecontentsMatch+0xc4>)
 80007b6:	461a      	mov	r2, r3
 80007b8:	460b      	mov	r3, r1
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	8013      	strh	r3, [r2, #0]
	strcat(fullfilepath,filinfo.fname);
 80007be:	4920      	ldr	r1, [pc, #128]	; (8000840 <doFlashandSDfirmwarecontentsMatch+0xc8>)
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 80007c2:	f009 faf5 	bl	8009db0 <strcat>

	if(f_open(&myFILE,fullfilepath, FA_READ)!=FR_OK){
 80007c6:	2201      	movs	r2, #1
 80007c8:	491a      	ldr	r1, [pc, #104]	; (8000834 <doFlashandSDfirmwarecontentsMatch+0xbc>)
 80007ca:	481e      	ldr	r0, [pc, #120]	; (8000844 <doFlashandSDfirmwarecontentsMatch+0xcc>)
 80007cc:	f008 fb16 	bl	8008dfc <f_open>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <doFlashandSDfirmwarecontentsMatch+0x62>
		return NO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e028      	b.n	800082c <doFlashandSDfirmwarecontentsMatch+0xb4>
	}

	if((f_read(&myFILE, buffer, filinfo.fsize, &bytesreadfromfile)!=FR_OK) && (bytesreadfromfile== filinfo.fsize)){
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <doFlashandSDfirmwarecontentsMatch+0xd0>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	491a      	ldr	r1, [pc, #104]	; (800084c <doFlashandSDfirmwarecontentsMatch+0xd4>)
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <doFlashandSDfirmwarecontentsMatch+0xcc>)
 80007e4:	f008 fdd2 	bl	800938c <f_read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d006      	beq.n	80007fc <doFlashandSDfirmwarecontentsMatch+0x84>
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <doFlashandSDfirmwarecontentsMatch+0xd0>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d101      	bne.n	80007fc <doFlashandSDfirmwarecontentsMatch+0x84>
		return NO;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e017      	b.n	800082c <doFlashandSDfirmwarecontentsMatch+0xb4>
	}

	if(compareRAMbufferwithFlashcontents(buffer, (char *)mainAPPstartFlashAddr, bytesreadfromfile)!=YES){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	461a      	mov	r2, r3
 8000800:	4913      	ldr	r1, [pc, #76]	; (8000850 <doFlashandSDfirmwarecontentsMatch+0xd8>)
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <doFlashandSDfirmwarecontentsMatch+0xd4>)
 8000804:	f000 f82a 	bl	800085c <compareRAMbufferwithFlashcontents>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d001      	beq.n	8000812 <doFlashandSDfirmwarecontentsMatch+0x9a>
		return NO;
 800080e:	2300      	movs	r3, #0
 8000810:	e00c      	b.n	800082c <doFlashandSDfirmwarecontentsMatch+0xb4>
	}

    // Sync, close file, unmount
    stat = f_close(&myFILE);
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <doFlashandSDfirmwarecontentsMatch+0xcc>)
 8000814:	f008 ff97 	bl	8009746 <f_close>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <doFlashandSDfirmwarecontentsMatch+0xdc>)
 800081e:	701a      	strb	r2, [r3, #0]
    f_mount(0, SDPath, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <doFlashandSDfirmwarecontentsMatch+0xe0>)
 8000824:	2000      	movs	r0, #0
 8000826:	f008 faa3 	bl	8008d70 <f_mount>

	return YES;
 800082a:	2301      	movs	r3, #1

}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bdb0      	pop	{r4, r5, r7, pc}
 8000834:	2000222c 	.word	0x2000222c
 8000838:	08009e3c 	.word	0x08009e3c
 800083c:	08009df0 	.word	0x08009df0
 8000840:	2000212a 	.word	0x2000212a
 8000844:	200010a8 	.word	0x200010a8
 8000848:	20002114 	.word	0x20002114
 800084c:	20002290 	.word	0x20002290
 8000850:	08010000 	.word	0x08010000
 8000854:	200020d8 	.word	0x200020d8
 8000858:	20012440 	.word	0x20012440

0800085c <compareRAMbufferwithFlashcontents>:

BootloaderLogicEnum compareRAMbufferwithFlashcontents(char * rambuffer, char * flashbuffer, UINT size){
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < size; ++i) {
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e00e      	b.n	800088c <compareRAMbufferwithFlashcontents+0x30>
		if(rambuffer[i]!=flashbuffer[i]){
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	4413      	add	r3, r2
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	440b      	add	r3, r1
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d001      	beq.n	8000886 <compareRAMbufferwithFlashcontents+0x2a>
			return NO;
 8000882:	2300      	movs	r3, #0
 8000884:	e007      	b.n	8000896 <compareRAMbufferwithFlashcontents+0x3a>
	for (uint32_t i = 0; i < size; ++i) {
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d3ec      	bcc.n	800086e <compareRAMbufferwithFlashcontents+0x12>
		}
	}
	return YES;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	371c      	adds	r7, #28
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <eraseFLASHappSpace>:

BootloaderLogicEnum eraseFLASHappSpace(){
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b088      	sub	sp, #32
 80008a6:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	HAL_StatusTypeDef status;
	uint32_t SectorError=0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
	erase.TypeErase=FLASH_TYPEERASE_SECTORS;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
	erase.Sector=FLASH_SECTOR_4;//0x8010000 //RM0090 pag75
 80008b0:	2304      	movs	r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
	erase.NbSectors=2;//4-5
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
	erase.VoltageRange=FLASH_VOLTAGE_RANGE_3;//https://electronics.stackexchange.com/questions/200992/can%C2%B4t-erase-data-from-flash-memory-stm32
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
	status=HAL_FLASH_Unlock();
 80008bc:	f001 fd48 	bl	8002350 <HAL_FLASH_Unlock>
 80008c0:	4603      	mov	r3, r0
 80008c2:	77fb      	strb	r3, [r7, #31]
		if(status!=HAL_OK){return NO;}
 80008c4:	7ffb      	ldrb	r3, [r7, #31]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <eraseFLASHappSpace+0x2c>
 80008ca:	2300      	movs	r3, #0
 80008cc:	e017      	b.n	80008fe <eraseFLASHappSpace+0x5c>
	status=HAL_FLASHEx_Erase(&erase, &SectorError);
 80008ce:	1d3a      	adds	r2, r7, #4
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fe9c 	bl	8002614 <HAL_FLASHEx_Erase>
 80008dc:	4603      	mov	r3, r0
 80008de:	77fb      	strb	r3, [r7, #31]
		if(status!=HAL_OK){return NO;}
 80008e0:	7ffb      	ldrb	r3, [r7, #31]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <eraseFLASHappSpace+0x48>
 80008e6:	2300      	movs	r3, #0
 80008e8:	e009      	b.n	80008fe <eraseFLASHappSpace+0x5c>
	status=HAL_FLASH_Lock();
 80008ea:	f001 fd53 	bl	8002394 <HAL_FLASH_Lock>
 80008ee:	4603      	mov	r3, r0
 80008f0:	77fb      	strb	r3, [r7, #31]
		if(status!=HAL_OK){return NO;}
 80008f2:	7ffb      	ldrb	r3, [r7, #31]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <eraseFLASHappSpace+0x5a>
 80008f8:	2300      	movs	r3, #0
 80008fa:	e000      	b.n	80008fe <eraseFLASHappSpace+0x5c>

	return YES;
 80008fc:	2301      	movs	r3, #1
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <programfromRAMtoFLASH>:

BootloaderLogicEnum programfromRAMtoFLASH(){
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800090e:	f001 fd1f 	bl	8002350 <HAL_FLASH_Unlock>
	for (uint32_t i = 0; i < filinfo.fsize; ++i) {//https://community.st.com/s/question/0D50X00009XkXWXSA3/stm32f446re-flashtypeprogramdoubleword-doesnt-work
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	e014      	b.n	8000942 <programfromRAMtoFLASH+0x3a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mainAPPstartFlashAddr+i, buffer[i]);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800091e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <programfromRAMtoFLASH+0x54>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2200      	movs	r2, #0
 800092e:	461c      	mov	r4, r3
 8000930:	4615      	mov	r5, r2
 8000932:	4622      	mov	r2, r4
 8000934:	462b      	mov	r3, r5
 8000936:	2000      	movs	r0, #0
 8000938:	f001 fcb6 	bl	80022a8 <HAL_FLASH_Program>
	for (uint32_t i = 0; i < filinfo.fsize; ++i) {//https://community.st.com/s/question/0D50X00009XkXWXSA3/stm32f446re-flashtypeprogramdoubleword-doesnt-work
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <programfromRAMtoFLASH+0x58>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3e5      	bcc.n	8000918 <programfromRAMtoFLASH+0x10>
	}
	HAL_FLASH_Lock();
 800094c:	f001 fd22 	bl	8002394 <HAL_FLASH_Lock>
	return YES;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bdb0      	pop	{r4, r5, r7, pc}
 800095a:	bf00      	nop
 800095c:	20002290 	.word	0x20002290
 8000960:	20002114 	.word	0x20002114

08000964 <deinitEverything>:

void deinitEverything() {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	//	HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
	HAL_UART_DeInit(&huart3);
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <deinitEverything+0x34>)
 800096a:	f004 fb12 	bl	8004f92 <HAL_UART_DeInit>
	HAL_SD_DeInit(&hsd);
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <deinitEverything+0x38>)
 8000970:	f003 f812 	bl	8003998 <HAL_SD_DeInit>
	HAL_ADC_DeInit(&hadc1);
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <deinitEverything+0x3c>)
 8000976:	f000 fd06 	bl	8001386 <HAL_ADC_DeInit>
	HAL_RCC_DeInit();
 800097a:	f002 fe8f 	bl	800369c <HAL_RCC_DeInit>
	HAL_DeInit();
 800097e:	f000 fc17 	bl	80011b0 <HAL_DeInit>
	SysTick->CTRL = 0;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <deinitEverything+0x40>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <deinitEverything+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <deinitEverything+0x40>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200123d4 	.word	0x200123d4
 800099c:	20012290 	.word	0x20012290
 80009a0:	20000028 	.word	0x20000028
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <jumpToApp>:

void jumpToApp(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	const JumpStruct *vector_p = (JumpStruct*)mainAPPstartFlashAddr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <jumpToApp+0x24>)
 80009b0:	607b      	str	r3, [r7, #4]
	deinitEverything();
 80009b2:	f7ff ffd7 	bl	8000964 <deinitEverything>
	/* let's do The Jump! */
	/* Jump, used asm to avoid stack optimization */
	asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6852      	ldr	r2, [r2, #4]
 80009be:	f383 8808 	msr	MSP, r3
 80009c2:	4710      	bx	r2
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	08010000 	.word	0x08010000

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_DMA_Init+0x4c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <MX_DMA_Init+0x4c>)
 80009e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_DMA_Init+0x4c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	203b      	movs	r0, #59	; 0x3b
 80009f8:	f001 f815 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009fc:	203b      	movs	r0, #59	; 0x3b
 80009fe:	f001 f82e 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2045      	movs	r0, #69	; 0x45
 8000a08:	f001 f80d 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a0c:	2045      	movs	r0, #69	; 0x45
 8000a0e:	f001 f826 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_GPIO_Init+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D8_NEOPIX_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_GPIO_Init+0xf0>)
 8000ac8:	f002 f976 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D8_NEOPIX_Pin|RED_LED_Pin;
 8000acc:	2303      	movs	r3, #3
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0xf0>)
 8000ae4:	f001 feb8 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_GPIO_Init+0xf4>)
 8000afe:	f001 feab 	bl	8002858 <HAL_GPIO_Init>

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020400 	.word	0x40020400

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fb26 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f826 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff ff7c 	bl	8000a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b28:	f7ff ff52 	bl	80009d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b2c:	f7ff fcd6 	bl	80004dc <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000b30:	f000 f88e 	bl	8000c50 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000b34:	f005 fa52 	bl	8005fdc <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000b38:	f000 fa5e 	bl	8000ff8 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isthereSDcard()==YES){
 8000b3c:	f7ff fd82 	bl	8000644 <isthereSDcard>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d110      	bne.n	8000b68 <main+0x50>
		  if(isThereFirmwarefile()==YES){
 8000b46:	f7ff fd8f 	bl	8000668 <isThereFirmwarefile>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10b      	bne.n	8000b68 <main+0x50>
			  while(doFlashandSDfirmwarecontentsMatch()==NO){
 8000b50:	e003      	b.n	8000b5a <main+0x42>
				  eraseFLASHappSpace();
 8000b52:	f7ff fea6 	bl	80008a2 <eraseFLASHappSpace>
				  programfromRAMtoFLASH();
 8000b56:	f7ff fed7 	bl	8000908 <programfromRAMtoFLASH>
			  while(doFlashandSDfirmwarecontentsMatch()==NO){
 8000b5a:	f7ff fe0d 	bl	8000778 <doFlashandSDfirmwarecontentsMatch>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f6      	beq.n	8000b52 <main+0x3a>
			  }
			  jumpToApp();
 8000b64:	f7ff ff20 	bl	80009a8 <jumpToApp>
		  }
	  }
	  HAL_Delay(100);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 fba5 	bl	80012b8 <HAL_Delay>
	  if(isthereSDcard()==YES){
 8000b6e:	e7e5      	b.n	8000b3c <main+0x24>

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f009 f90e 	bl	8009da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <SystemClock_Config+0xcc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <SystemClock_Config+0xcc>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <SystemClock_Config+0xcc>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <SystemClock_Config+0xd0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <SystemClock_Config+0xd0>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <SystemClock_Config+0xd0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000be0:	2306      	movs	r3, #6
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000be4:	23a8      	movs	r3, #168	; 0xa8
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 f8f9 	bl	8002dec <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c00:	f000 f820 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2105      	movs	r1, #5
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fb5a 	bl	80032dc <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c2e:	f000 f809 	bl	8000c44 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	; 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <MX_SDIO_SD_Init+0x3c>)
 8000c58:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <MX_SDIO_SD_Init+0x38>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	20012290 	.word	0x20012290
 8000c8c:	40012c00 	.word	0x40012c00

08000c90 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a70      	ldr	r2, [pc, #448]	; (8000e70 <HAL_SD_MspInit+0x1e0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f040 80da 	bne.w	8000e68 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b6e      	ldr	r3, [pc, #440]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	4a6d      	ldr	r2, [pc, #436]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b67      	ldr	r3, [pc, #412]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a66      	ldr	r2, [pc, #408]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b64      	ldr	r3, [pc, #400]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a5f      	ldr	r2, [pc, #380]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <HAL_SD_MspInit+0x1e4>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d08:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4854      	ldr	r0, [pc, #336]	; (8000e78 <HAL_SD_MspInit+0x1e8>)
 8000d26:	f001 fd97 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	484c      	ldr	r0, [pc, #304]	; (8000e78 <HAL_SD_MspInit+0x1e8>)
 8000d48:	f001 fd86 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4845      	ldr	r0, [pc, #276]	; (8000e7c <HAL_SD_MspInit+0x1ec>)
 8000d68:	f001 fd76 	bl	8002858 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d6c:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d6e:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <HAL_SD_MspInit+0x1f4>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d78:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000d98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000db6:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000db8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000dc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000dc6:	482e      	ldr	r0, [pc, #184]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000dc8:	f000 fe72 	bl	8001ab0 <HAL_DMA_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000dd2:	f7ff ff37 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
 8000ddc:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <HAL_SD_MspInit+0x1f0>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <HAL_SD_MspInit+0x1fc>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000df2:	2240      	movs	r2, #64	; 0x40
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e16:	2220      	movs	r2, #32
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e3e:	f000 fe37 	bl	8001ab0 <HAL_DMA_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000e48:	f7ff fefc 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_SD_MspInit+0x1f8>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2031      	movs	r0, #49	; 0x31
 8000e5e:	f000 fde2 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e62:	2031      	movs	r0, #49	; 0x31
 8000e64:	f000 fdfb 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	20012314 	.word	0x20012314
 8000e84:	40026458 	.word	0x40026458
 8000e88:	20012374 	.word	0x20012374
 8000e8c:	400264a0 	.word	0x400264a0

08000e90 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDIO)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_SD_MspDeInit+0x54>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11b      	bne.n	8000eda <HAL_SD_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_SD_MspDeInit+0x58>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_SD_MspDeInit+0x58>)
 8000ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000eae:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <HAL_SD_MspDeInit+0x5c>)
 8000eb4:	f001 fe6c 	bl	8002b90 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8000eb8:	2104      	movs	r1, #4
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <HAL_SD_MspDeInit+0x60>)
 8000ebc:	f001 fe68 	bl	8002b90 <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fea1 	bl	8001c0c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fe9c 	bl	8001c0c <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 8000ed4:	2031      	movs	r0, #49	; 0x31
 8000ed6:	f000 fdd0 	bl	8001a7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40012c00 	.word	0x40012c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f972 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <SDIO_IRQHandler+0x10>)
 8000f9e:	f002 fee3 	bl	8003d68 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20012290 	.word	0x20012290

08000fac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA2_Stream3_IRQHandler+0x10>)
 8000fb2:	f000 ff03 	bl	8001dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20012314 	.word	0x20012314

08000fc0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA2_Stream6_IRQHandler+0x10>)
 8000fc6:	f000 fef9 	bl	8001dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20012374 	.word	0x20012374

08000fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART3_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART3_UART_Init+0x4c>)
 8001030:	f003 ff62 	bl	8004ef8 <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800103a:	f7ff fe03 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200123d4 	.word	0x200123d4
 8001048:	40004800 	.word	0x40004800

0800104c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_UART_MspInit+0x84>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12c      	bne.n	80010c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_UART_MspInit+0x88>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_UART_MspInit+0x88>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_UART_MspInit+0x88>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_UART_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_UART_MspInit+0x88>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_UART_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010b8:	2307      	movs	r3, #7
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_UART_MspInit+0x8c>)
 80010c4:	f001 fbc8 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40004800 	.word	0x40004800
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020400 	.word	0x40020400

080010dc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_UART_MspDeInit+0x30>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10a      	bne.n	8001104 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_UART_MspDeInit+0x34>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_UART_MspDeInit+0x34>)
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80010fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_UART_MspDeInit+0x38>)
 8001100:	f001 fd46 	bl	8002b90 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40004800 	.word	0x40004800
 8001110:	40023800 	.word	0x40023800
 8001114:	40020400 	.word	0x40020400

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff ff47 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f008 fe07 	bl	8009d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fce5 	bl	8000b18 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	0800a2d0 	.word	0x0800a2d0
  ldr r2, =_sbss
 8001160:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001164:	20012480 	.word	0x20012480

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 fc3b 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f83c 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fea8 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_DeInit+0x54>)
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_DeInit+0x54>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_DeInit+0x54>)
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_DeInit+0x54>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_DeInit+0x54>)
 80011d2:	f04f 32ff 	mov.w	r2, #4294967295
 80011d6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_DeInit+0x54>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_DeInit+0x54>)
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_DeInit+0x54>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_DeInit+0x54>)
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_DeInit+0x54>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80011fa:	f000 f805 	bl	8001208 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fc2d 	bl	8001a96 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 fbe7 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	20000008 	.word	0x20000008
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20012418 	.word	0x20012418

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20012418 	.word	0x20012418

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e033      	b.n	800137e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff f92e 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001346:	f023 0302 	bic.w	r3, r3, #2
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f96c 	bl	8001630 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
 800136e:	e001      	b.n	8001374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e022      	b.n	80013e2 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f043 0202 	orr.w	r2, r3, #2
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d108      	bne.n	80013d8 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff f91e 	bl	8000608 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1c>
 8001404:	2302      	movs	r3, #2
 8001406:	e105      	b.n	8001614 <HAL_ADC_ConfigChannel+0x228>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d925      	bls.n	8001464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68d9      	ldr	r1, [r3, #12]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	3b1e      	subs	r3, #30
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68d9      	ldr	r1, [r3, #12]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	4603      	mov	r3, r0
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4403      	add	r3, r0
 8001456:	3b1e      	subs	r3, #30
 8001458:	409a      	lsls	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	e022      	b.n	80014aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	2207      	movs	r2, #7
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	4603      	mov	r3, r0
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4403      	add	r3, r0
 80014a0:	409a      	lsls	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d824      	bhi.n	80014fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	3b05      	subs	r3, #5
 80014c4:	221f      	movs	r2, #31
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	400a      	ands	r2, r1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b05      	subs	r3, #5
 80014ee:	fa00 f203 	lsl.w	r2, r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
 80014fa:	e04c      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d824      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b23      	subs	r3, #35	; 0x23
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43da      	mvns	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	400a      	ands	r2, r1
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b23      	subs	r3, #35	; 0x23
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
 800154c:	e023      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b41      	subs	r3, #65	; 0x41
 8001560:	221f      	movs	r2, #31
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	400a      	ands	r2, r1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b41      	subs	r3, #65	; 0x41
 800158a:	fa00 f203 	lsl.w	r2, r0, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_ADC_ConfigChannel+0x234>)
 8001598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a21      	ldr	r2, [pc, #132]	; (8001624 <HAL_ADC_ConfigChannel+0x238>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1cc>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_ADC_ConfigChannel+0x238>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d123      	bne.n	800160a <HAL_ADC_ConfigChannel+0x21e>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d003      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0x1e6>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b11      	cmp	r3, #17
 80015d0:	d11b      	bne.n	800160a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d111      	bne.n	800160a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_ADC_ConfigChannel+0x23c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_ADC_ConfigChannel+0x240>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0c9a      	lsrs	r2, r3, #18
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015fc:	e002      	b.n	8001604 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3b01      	subs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f9      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40012300 	.word	0x40012300
 8001624:	40012000 	.word	0x40012000
 8001628:	20000000 	.word	0x20000000
 800162c:	431bde83 	.word	0x431bde83

08001630 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001638:	4b79      	ldr	r3, [pc, #484]	; (8001820 <ADC_Init+0x1f0>)
 800163a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	431a      	orrs	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	021a      	lsls	r2, r3, #8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6899      	ldr	r1, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	4a58      	ldr	r2, [pc, #352]	; (8001824 <ADC_Init+0x1f4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d022      	beq.n	800170e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6899      	ldr	r1, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6899      	ldr	r1, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	e00f      	b.n	800172e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800171c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0202 	bic.w	r2, r2, #2
 800173c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
 8001748:	005a      	lsls	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01b      	beq.n	8001794 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800176a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800177a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6859      	ldr	r1, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	035a      	lsls	r2, r3, #13
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	e007      	b.n	80017a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	3b01      	subs	r3, #1
 80017c0:	051a      	lsls	r2, r3, #20
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6899      	ldr	r1, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e6:	025a      	lsls	r2, r3, #9
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	029a      	lsls	r2, r3, #10
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40012300 	.word	0x40012300
 8001824:	0f000001 	.word	0x0f000001

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db12      	blt.n	8001900 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	490a      	ldr	r1, [pc, #40]	; (800190c <__NVIC_DisableIRQ+0x44>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	3320      	adds	r3, #32
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018f4:	f3bf 8f4f 	dsb	sy
}
 80018f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018fa:	f3bf 8f6f 	isb	sy
}
 80018fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff05 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff1a 	bl	8001870 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff0d 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff1d 	bl	80018c8 <__NVIC_DisableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff94 	bl	80019cc <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff fbf0 	bl	80012a0 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e099      	b.n	8001c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aec:	e00f      	b.n	8001b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aee:	f7ff fbd7 	bl	80012a0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d908      	bls.n	8001b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2203      	movs	r2, #3
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e078      	b.n	8001c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1e8      	bne.n	8001aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_DMA_Init+0x158>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4313      	orrs	r3, r2
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f023 0307 	bic.w	r3, r3, #7
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d117      	bne.n	8001bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fafb 	bl	80021b0 <DMA_CheckFifoParam>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2240      	movs	r2, #64	; 0x40
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e016      	b.n	8001c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fab2 	bl	8002144 <DMA_CalcBaseAndBitshift>
 8001be0:	4603      	mov	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	223f      	movs	r2, #63	; 0x3f
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	f010803f 	.word	0xf010803f

08001c0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e050      	b.n	8001cc0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d101      	bne.n	8001c2e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e048      	b.n	8001cc0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2221      	movs	r2, #33	; 0x21
 8001c6c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fa68 	bl	8002144 <DMA_CalcBaseAndBitshift>
 8001c74:	4603      	mov	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	223f      	movs	r2, #63	; 0x3f
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_DMA_Start_IT+0x26>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e040      	b.n	8001d70 <HAL_DMA_Start_IT+0xa8>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d12f      	bne.n	8001d62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f9e6 	bl	80020e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	223f      	movs	r2, #63	; 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0216 	orr.w	r2, r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0208 	orr.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e005      	b.n	8001d6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d004      	beq.n	8001d96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00c      	b.n	8001db0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc8:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <HAL_DMA_IRQHandler+0x248>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a8e      	ldr	r2, [pc, #568]	; (8002008 <HAL_DMA_IRQHandler+0x24c>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2208      	movs	r2, #8
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0204 	bic.w	r2, r2, #4
 8001e0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2208      	movs	r2, #8
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2204      	movs	r2, #4
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2204      	movs	r2, #4
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2210      	movs	r2, #16
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d043      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03c      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	2210      	movs	r2, #16
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d018      	beq.n	8001efe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d024      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
 8001eea:	e01f      	b.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e016      	b.n	8001f2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2220      	movs	r2, #32
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 808f 	beq.w	800205c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8087 	beq.w	800205c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2220      	movs	r2, #32
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d136      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x1da>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	223f      	movs	r2, #63	; 0x3f
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d07e      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
        }
        return;
 8001fd2:	e079      	b.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01d      	beq.n	800201e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10d      	bne.n	800200c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
 8002000:	e02c      	b.n	800205c <HAL_DMA_IRQHandler+0x2a0>
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000
 8002008:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d023      	beq.n	800205c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
 800201c:	e01e      	b.n	800205c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10f      	bne.n	800204c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0210 	bic.w	r2, r2, #16
 800203a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	2b00      	cmp	r3, #0
 8002062:	d032      	beq.n	80020ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d022      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2205      	movs	r2, #5
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3301      	adds	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	d307      	bcc.n	80020a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f2      	bne.n	8002088 <HAL_DMA_IRQHandler+0x2cc>
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
 80020c6:	e000      	b.n	80020ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80020c8:	bf00      	nop
    }
  }
}
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d108      	bne.n	8002128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002126:	e007      	b.n	8002138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3b10      	subs	r3, #16
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <DMA_CalcBaseAndBitshift+0x68>)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d909      	bls.n	8002186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	1d1a      	adds	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	659a      	str	r2, [r3, #88]	; 0x58
 8002184:	e007      	b.n	8002196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	aaaaaaab 	.word	0xaaaaaaab
 80021ac:	08009e64 	.word	0x08009e64

080021b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11f      	bne.n	800220a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d856      	bhi.n	800227e <DMA_CheckFifoParam+0xce>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <DMA_CheckFifoParam+0x28>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021fb 	.word	0x080021fb
 80021e0:	080021e9 	.word	0x080021e9
 80021e4:	0800227f 	.word	0x0800227f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d046      	beq.n	8002282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e043      	b.n	8002282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002202:	d140      	bne.n	8002286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002208:	e03d      	b.n	8002286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002212:	d121      	bne.n	8002258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d837      	bhi.n	800228a <DMA_CheckFifoParam+0xda>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <DMA_CheckFifoParam+0x70>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002231 	.word	0x08002231
 8002224:	08002237 	.word	0x08002237
 8002228:	08002231 	.word	0x08002231
 800222c:	08002249 	.word	0x08002249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      break;
 8002234:	e030      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d025      	beq.n	800228e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002246:	e022      	b.n	800228e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002250:	d11f      	bne.n	8002292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002256:	e01c      	b.n	8002292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d903      	bls.n	8002266 <DMA_CheckFifoParam+0xb6>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d003      	beq.n	800226c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002264:	e018      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      break;
 800226a:	e015      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00e      	beq.n	8002296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e00b      	b.n	8002296 <DMA_CheckFifoParam+0xe6>
      break;
 800227e:	bf00      	nop
 8002280:	e00a      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e008      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e006      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
 800228c:	e004      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
 8002290:	e002      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;   
 8002292:	bf00      	nop
 8002294:	e000      	b.n	8002298 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
    }
  } 
  
  return status; 
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_FLASH_Program+0xa0>)
 80022bc:	7e1b      	ldrb	r3, [r3, #24]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_FLASH_Program+0x1e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e03b      	b.n	800233e <HAL_FLASH_Program+0x96>
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_FLASH_Program+0xa0>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022d0:	f000 f870 	bl	80023b4 <FLASH_WaitForLastOperation>
 80022d4:	4603      	mov	r3, r0
 80022d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12b      	bne.n	8002336 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80022e4:	783b      	ldrb	r3, [r7, #0]
 80022e6:	4619      	mov	r1, r3
 80022e8:	68b8      	ldr	r0, [r7, #8]
 80022ea:	f000 f91b 	bl	8002524 <FLASH_Program_Byte>
 80022ee:	e016      	b.n	800231e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80022f6:	883b      	ldrh	r3, [r7, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	68b8      	ldr	r0, [r7, #8]
 80022fc:	f000 f8ee 	bl	80024dc <FLASH_Program_HalfWord>
 8002300:	e00d      	b.n	800231e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d105      	bne.n	8002314 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	68b8      	ldr	r0, [r7, #8]
 800230e:	f000 f8c3 	bl	8002498 <FLASH_Program_Word>
 8002312:	e004      	b.n	800231e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002318:	68b8      	ldr	r0, [r7, #8]
 800231a:	f000 f88b 	bl	8002434 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800231e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002322:	f000 f847 	bl	80023b4 <FLASH_WaitForLastOperation>
 8002326:	4603      	mov	r3, r0
 8002328:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_FLASH_Program+0xa4>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_FLASH_Program+0xa4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_FLASH_Program+0xa0>)
 8002338:	2200      	movs	r2, #0
 800233a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800233c:	7dfb      	ldrb	r3, [r7, #23]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2001241c 	.word	0x2001241c
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_FLASH_Unlock+0x38>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da0b      	bge.n	800237a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_FLASH_Unlock+0x38>)
 8002364:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_FLASH_Unlock+0x3c>)
 8002366:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_FLASH_Unlock+0x38>)
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_FLASH_Unlock+0x40>)
 800236c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_FLASH_Unlock+0x38>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da01      	bge.n	800237a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800237a:	79fb      	ldrb	r3, [r7, #7]
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40023c00 	.word	0x40023c00
 800238c:	45670123 	.word	0x45670123
 8002390:	cdef89ab 	.word	0xcdef89ab

08002394 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_FLASH_Lock+0x1c>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_FLASH_Lock+0x1c>)
 800239e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <FLASH_WaitForLastOperation+0x78>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80023c6:	f7fe ff6b 	bl	80012a0 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80023cc:	e010      	b.n	80023f0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d00c      	beq.n	80023f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <FLASH_WaitForLastOperation+0x38>
 80023dc:	f7fe ff60 	bl	80012a0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d201      	bcs.n	80023f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e019      	b.n	8002424 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <FLASH_WaitForLastOperation+0x7c>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e8      	bne.n	80023ce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <FLASH_WaitForLastOperation+0x7c>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <FLASH_WaitForLastOperation+0x7c>)
 800240a:	2201      	movs	r2, #1
 800240c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <FLASH_WaitForLastOperation+0x7c>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800241a:	f000 f8a5 	bl	8002568 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
  
}  
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2001241c 	.word	0x2001241c
 8002430:	40023c00 	.word	0x40023c00

08002434 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <FLASH_Program_DoubleWord+0x60>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	4a13      	ldr	r2, [pc, #76]	; (8002494 <FLASH_Program_DoubleWord+0x60>)
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <FLASH_Program_DoubleWord+0x60>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4a10      	ldr	r2, [pc, #64]	; (8002494 <FLASH_Program_DoubleWord+0x60>)
 8002452:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <FLASH_Program_DoubleWord+0x60>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <FLASH_Program_DoubleWord+0x60>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800246a:	f3bf 8f6f 	isb	sy
}
 800246e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	000a      	movs	r2, r1
 800247e:	2300      	movs	r3, #0
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	3104      	adds	r1, #4
 8002484:	4613      	mov	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40023c00 	.word	0x40023c00

08002498 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <FLASH_Program_Word+0x40>)
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <FLASH_Program_Word+0x40>)
 80024a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <FLASH_Program_Word+0x40>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <FLASH_Program_Word+0x40>)
 80024b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <FLASH_Program_Word+0x40>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <FLASH_Program_Word+0x40>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40023c00 	.word	0x40023c00

080024dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <FLASH_Program_HalfWord+0x44>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <FLASH_Program_HalfWord+0x44>)
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <FLASH_Program_HalfWord+0x44>)
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4a09      	ldr	r2, [pc, #36]	; (8002520 <FLASH_Program_HalfWord+0x44>)
 80024fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <FLASH_Program_HalfWord+0x44>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <FLASH_Program_HalfWord+0x44>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	801a      	strh	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00

08002524 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <FLASH_Program_Byte+0x40>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <FLASH_Program_Byte+0x40>)
 8002536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <FLASH_Program_Byte+0x40>)
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <FLASH_Program_Byte+0x40>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <FLASH_Program_Byte+0x40>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <FLASH_Program_Byte+0x40>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00

08002568 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <FLASH_SetErrorCode+0xa4>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 8002582:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <FLASH_SetErrorCode+0xa4>)
 8002586:	2210      	movs	r2, #16
 8002588:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <FLASH_SetErrorCode+0xa4>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025a4:	2220      	movs	r2, #32
 80025a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f043 0320 	orr.w	r3, r3, #32
 80025f8:	4a05      	ldr	r2, [pc, #20]	; (8002610 <FLASH_SetErrorCode+0xa8>)
 80025fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <FLASH_SetErrorCode+0xa4>)
 80025fe:	2202      	movs	r2, #2
 8002600:	60da      	str	r2, [r3, #12]
  }
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40023c00 	.word	0x40023c00
 8002610:	2001241c 	.word	0x2001241c

08002614 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_FLASHEx_Erase+0xd8>)
 8002628:	7e1b      	ldrb	r3, [r3, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_FLASHEx_Erase+0x1e>
 800262e:	2302      	movs	r3, #2
 8002630:	e058      	b.n	80026e4 <HAL_FLASHEx_Erase+0xd0>
 8002632:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_FLASHEx_Erase+0xd8>)
 8002634:	2201      	movs	r2, #1
 8002636:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002638:	f24c 3050 	movw	r0, #50000	; 0xc350
 800263c:	f7ff feba 	bl	80023b4 <FLASH_WaitForLastOperation>
 8002640:	4603      	mov	r3, r0
 8002642:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d148      	bne.n	80026dc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d115      	bne.n	8002686 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 f844 	bl	80026f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800266c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002670:	f7ff fea0 	bl	80023b4 <FLASH_WaitForLastOperation>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_FLASHEx_Erase+0xdc>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_FLASHEx_Erase+0xdc>)
 800267e:	f023 0304 	bic.w	r3, r3, #4
 8002682:	6113      	str	r3, [r2, #16]
 8002684:	e028      	b.n	80026d8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	e01c      	b.n	80026c8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	68b8      	ldr	r0, [r7, #8]
 8002698:	f000 f850 	bl	800273c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800269c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026a0:	f7ff fe88 	bl	80023b4 <FLASH_WaitForLastOperation>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_FLASHEx_Erase+0xdc>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_FLASHEx_Erase+0xdc>)
 80026ae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80026b2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	601a      	str	r2, [r3, #0]
          break;
 80026c0:	e00a      	b.n	80026d8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3301      	adds	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4413      	add	r3, r2
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3da      	bcc.n	800268e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80026d8:	f000 f878 	bl	80027cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_FLASHEx_Erase+0xd8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	761a      	strb	r2, [r3, #24]

  return status;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2001241c 	.word	0x2001241c
 80026f0:	40023c00 	.word	0x40023c00

080026f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <FLASH_MassErase+0x44>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <FLASH_MassErase+0x44>)
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <FLASH_MassErase+0x44>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <FLASH_MassErase+0x44>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <FLASH_MassErase+0x44>)
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	4313      	orrs	r3, r2
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <FLASH_MassErase+0x44>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6113      	str	r3, [r2, #16]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00

0800273c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e010      	b.n	800277a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d103      	bne.n	8002766 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800275e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e009      	b.n	800277a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d103      	bne.n	8002774 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e002      	b.n	800277a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002774:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	490f      	ldr	r1, [pc, #60]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 8002798:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800279c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <FLASH_Erase_Sector+0x8c>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6113      	str	r3, [r2, #16]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40023c00 	.word	0x40023c00

080027cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d017      	beq.n	800280c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <FLASH_FlushCaches+0x88>)
 80027fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <FLASH_FlushCaches+0x88>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a13      	ldr	r2, [pc, #76]	; (8002854 <FLASH_FlushCaches+0x88>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <FLASH_FlushCaches+0x88>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <FLASH_FlushCaches+0x88>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <FLASH_FlushCaches+0x88>)
 800281e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002822:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <FLASH_FlushCaches+0x88>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <FLASH_FlushCaches+0x88>)
 800282a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <FLASH_FlushCaches+0x88>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <FLASH_FlushCaches+0x88>)
 8002836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800283a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <FLASH_FlushCaches+0x88>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <FLASH_FlushCaches+0x88>)
 8002842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002846:	6013      	str	r3, [r2, #0]
  }
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e16b      	b.n	8002b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 815a 	bne.w	8002b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d130      	bne.n	800290c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80b4 	beq.w	8002b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <HAL_GPIO_Init+0x30c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a5f      	ldr	r2, [pc, #380]	; (8002b64 <HAL_GPIO_Init+0x30c>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_GPIO_Init+0x30c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fa:	4a5b      	ldr	r2, [pc, #364]	; (8002b68 <HAL_GPIO_Init+0x310>)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_GPIO_Init+0x314>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02b      	beq.n	8002a7e <HAL_GPIO_Init+0x226>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_GPIO_Init+0x318>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d025      	beq.n	8002a7a <HAL_GPIO_Init+0x222>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a50      	ldr	r2, [pc, #320]	; (8002b74 <HAL_GPIO_Init+0x31c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01f      	beq.n	8002a76 <HAL_GPIO_Init+0x21e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4f      	ldr	r2, [pc, #316]	; (8002b78 <HAL_GPIO_Init+0x320>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d019      	beq.n	8002a72 <HAL_GPIO_Init+0x21a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	; (8002b7c <HAL_GPIO_Init+0x324>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0x216>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <HAL_GPIO_Init+0x328>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00d      	beq.n	8002a6a <HAL_GPIO_Init+0x212>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <HAL_GPIO_Init+0x32c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_GPIO_Init+0x330>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_Init+0x20a>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e00e      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a62:	2308      	movs	r3, #8
 8002a64:	e00c      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a66:	2306      	movs	r3, #6
 8002a68:	e00a      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e008      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_GPIO_Init+0x228>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	f002 0203 	and.w	r2, r2, #3
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a90:	4935      	ldr	r1, [pc, #212]	; (8002b68 <HAL_GPIO_Init+0x310>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ac2:	4a32      	ldr	r2, [pc, #200]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	f67f ae90 	bls.w	8002874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40013800 	.word	0x40013800
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40020400 	.word	0x40020400
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40021400 	.word	0x40021400
 8002b84:	40021800 	.word	0x40021800
 8002b88:	40021c00 	.word	0x40021c00
 8002b8c:	40013c00 	.word	0x40013c00

08002b90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e0cd      	b.n	8002d48 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	f040 80bd 	bne.w	8002d42 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002bc8:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_GPIO_DeInit+0x1d0>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	4013      	ands	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_GPIO_DeInit+0x1d4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02b      	beq.n	8002c4a <HAL_GPIO_DeInit+0xba>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <HAL_GPIO_DeInit+0x1d8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d025      	beq.n	8002c46 <HAL_GPIO_DeInit+0xb6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a5b      	ldr	r2, [pc, #364]	; (8002d6c <HAL_GPIO_DeInit+0x1dc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01f      	beq.n	8002c42 <HAL_GPIO_DeInit+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <HAL_GPIO_DeInit+0x1e0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_DeInit+0xae>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a59      	ldr	r2, [pc, #356]	; (8002d74 <HAL_GPIO_DeInit+0x1e4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_DeInit+0xaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_GPIO_DeInit+0x1e8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_DeInit+0xa6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	; (8002d7c <HAL_GPIO_DeInit+0x1ec>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_DeInit+0xa2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_GPIO_DeInit+0x1f0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_DeInit+0x9e>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e00e      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c2e:	2308      	movs	r3, #8
 8002c30:	e00c      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e00a      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e008      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e004      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_DeInit+0xbc>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	f002 0203 	and.w	r2, r2, #3
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	4093      	lsls	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d132      	bne.n	8002cc2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c5c:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	4947      	ldr	r1, [pc, #284]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c6a:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	4944      	ldr	r1, [pc, #272]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	4940      	ldr	r1, [pc, #256]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c86:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	493d      	ldr	r1, [pc, #244]	; (8002d84 <HAL_GPIO_DeInit+0x1f4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	; (8002d60 <HAL_GPIO_DeInit+0x1d0>)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	482a      	ldr	r0, [pc, #168]	; (8002d60 <HAL_GPIO_DeInit+0x1d0>)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	400a      	ands	r2, r1
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2103      	movs	r1, #3
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	08d2      	lsrs	r2, r2, #3
 8002cf8:	4019      	ands	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2103      	movs	r1, #3
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f af2e 	bls.w	8002bac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40021400 	.word	0x40021400
 8002d7c:	40021800 	.word	0x40021800
 8002d80:	40021c00 	.word	0x40021c00
 8002d84:	40013c00 	.word	0x40013c00

08002d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
 8002da4:	e001      	b.n	8002daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd4:	e003      	b.n	8002dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	619a      	str	r2, [r3, #24]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e267      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d075      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0a:	4b88      	ldr	r3, [pc, #544]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d00c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b85      	ldr	r3, [pc, #532]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d112      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b82      	ldr	r3, [pc, #520]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2e:	d10b      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	4b7e      	ldr	r3, [pc, #504]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05b      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x108>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d157      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e242      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d106      	bne.n	8002e60 <HAL_RCC_OscConfig+0x74>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0xb0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b70      	ldr	r3, [pc, #448]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6f      	ldr	r2, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6c      	ldr	r2, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xb0>
 8002e84:	4b69      	ldr	r3, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a68      	ldr	r2, [pc, #416]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f9fc 	bl	80012a0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe f9f8 	bl	80012a0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e207      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xc0>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f9e8 	bl	80012a0 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe f9e4 	bl	80012a0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1f3      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xe8>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b44      	ldr	r3, [pc, #272]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x152>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c7      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4937      	ldr	r1, [pc, #220]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e03a      	b.n	8002fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_RCC_OscConfig+0x244>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe f99d 	bl	80012a0 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fe f999 	bl	80012a0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1a8      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4925      	ldr	r1, [pc, #148]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCC_OscConfig+0x244>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f97c 	bl	80012a0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe f978 	bl	80012a0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e187      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d036      	beq.n	8003044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_RCC_OscConfig+0x248>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f95c 	bl	80012a0 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fec:	f7fe f958 	bl	80012a0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e167      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8003000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x200>
 800300a:	e01b      	b.n	8003044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_OscConfig+0x248>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe f945 	bl	80012a0 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	e00e      	b.n	8003038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301a:	f7fe f941 	bl	80012a0 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d907      	bls.n	8003038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e150      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
 800302c:	40023800 	.word	0x40023800
 8003030:	42470000 	.word	0x42470000
 8003034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ea      	bne.n	800301a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8097 	beq.w	8003180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b81      	ldr	r3, [pc, #516]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b7d      	ldr	r3, [pc, #500]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a7c      	ldr	r2, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b7a      	ldr	r3, [pc, #488]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b77      	ldr	r3, [pc, #476]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b74      	ldr	r3, [pc, #464]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a73      	ldr	r2, [pc, #460]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe f901 	bl	80012a0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fe f8fd 	bl	80012a0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e10c      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2ea>
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a63      	ldr	r2, [pc, #396]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	e01c      	b.n	8003110 <HAL_RCC_OscConfig+0x324>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x30c>
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	4b5c      	ldr	r3, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a5b      	ldr	r2, [pc, #364]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0x324>
 80030f8:	4b58      	ldr	r3, [pc, #352]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	4b55      	ldr	r3, [pc, #340]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 0304 	bic.w	r3, r3, #4
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe f8c2 	bl	80012a0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe f8be 	bl	80012a0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0cb      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ee      	beq.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7fe f8ac 	bl	80012a0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe f8a8 	bl	80012a0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0b5      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003162:	4b3e      	ldr	r3, [pc, #248]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ee      	bne.n	800314c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	4a38      	ldr	r2, [pc, #224]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a1 	beq.w	80032cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b08      	cmp	r3, #8
 8003194:	d05c      	beq.n	8003250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d141      	bne.n	8003222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe f87c 	bl	80012a0 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe f878 	bl	80012a0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e087      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	491b      	ldr	r1, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x478>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe f851 	bl	80012a0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7fe f84d 	bl	80012a0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e05c      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x416>
 8003220:	e054      	b.n	80032cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe f83a 	bl	80012a0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe f836 	bl	80012a0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e045      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
 800324e:	e03d      	b.n	80032cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e038      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
 800325c:	40023800 	.word	0x40023800
 8003260:	40007000 	.word	0x40007000
 8003264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x4ec>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d121      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d11a      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800329e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	3b01      	subs	r3, #1
 80032b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800

080032dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0cc      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f0:	4b68      	ldr	r3, [pc, #416]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d90c      	bls.n	8003318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0b8      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800333a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	494d      	ldr	r1, [pc, #308]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d044      	beq.n	80033fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d119      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d003      	beq.n	800339a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	2b03      	cmp	r3, #3
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e067      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4934      	ldr	r1, [pc, #208]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033cc:	f7fd ff68 	bl	80012a0 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fd ff64 	bl	80012a0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d20c      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e032      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4916      	ldr	r1, [pc, #88]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490e      	ldr	r1, [pc, #56]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f821 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490a      	ldr	r1, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fec8 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023c00 	.word	0x40023c00
 8003498:	40023800 	.word	0x40023800
 800349c:	08009e4c 	.word	0x08009e4c
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b090      	sub	sp, #64	; 0x40
 80034ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b8:	2300      	movs	r3, #0
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c0:	4b59      	ldr	r3, [pc, #356]	; (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d00d      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x40>
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	f200 80a1 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x16c>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x34>
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034da:	e09b      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_RCC_GetSysClockFreq+0x184>)
 80034de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034e0:	e09b      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e2:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_GetSysClockFreq+0x188>)
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034e6:	e098      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f2:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d028      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	2200      	movs	r2, #0
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	627a      	str	r2, [r7, #36]	; 0x24
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003510:	2100      	movs	r1, #0
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_GetSysClockFreq+0x188>)
 8003514:	fb03 f201 	mul.w	r2, r3, r1
 8003518:	2300      	movs	r3, #0
 800351a:	fb00 f303 	mul.w	r3, r0, r3
 800351e:	4413      	add	r3, r2
 8003520:	4a43      	ldr	r2, [pc, #268]	; (8003630 <HAL_RCC_GetSysClockFreq+0x188>)
 8003522:	fba0 1202 	umull	r1, r2, r0, r2
 8003526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003528:	460a      	mov	r2, r1
 800352a:	62ba      	str	r2, [r7, #40]	; 0x28
 800352c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352e:	4413      	add	r3, r2
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	2200      	movs	r2, #0
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	61fa      	str	r2, [r7, #28]
 800353a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003542:	f7fc fe49 	bl	80001d8 <__aeabi_uldivmod>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4613      	mov	r3, r2
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354e:	e053      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	2200      	movs	r2, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	617a      	str	r2, [r7, #20]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003562:	f04f 0b00 	mov.w	fp, #0
 8003566:	4652      	mov	r2, sl
 8003568:	465b      	mov	r3, fp
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	0159      	lsls	r1, r3, #5
 8003574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003578:	0150      	lsls	r0, r2, #5
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	ebb2 080a 	subs.w	r8, r2, sl
 8003582:	eb63 090b 	sbc.w	r9, r3, fp
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003592:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003596:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800359a:	ebb2 0408 	subs.w	r4, r2, r8
 800359e:	eb63 0509 	sbc.w	r5, r3, r9
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	00eb      	lsls	r3, r5, #3
 80035ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b0:	00e2      	lsls	r2, r4, #3
 80035b2:	4614      	mov	r4, r2
 80035b4:	461d      	mov	r5, r3
 80035b6:	eb14 030a 	adds.w	r3, r4, sl
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	eb45 030b 	adc.w	r3, r5, fp
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ce:	4629      	mov	r1, r5
 80035d0:	028b      	lsls	r3, r1, #10
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d8:	4621      	mov	r1, r4
 80035da:	028a      	lsls	r2, r1, #10
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	2200      	movs	r2, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	60fa      	str	r2, [r7, #12]
 80035e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ec:	f7fc fdf4 	bl	80001d8 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetSysClockFreq+0x184>)
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800361c:	4618      	mov	r0, r3
 800361e:	3740      	adds	r7, #64	; 0x40
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	00b71b00 	.word	0x00b71b00

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	08009e5c 	.word	0x08009e5c

08003674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003678:	f7ff ffdc 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0b5b      	lsrs	r3, r3, #13
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	08009e5c 	.word	0x08009e5c

0800369c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80036a2:	f7fd fdfd 	bl	80012a0 <HAL_GetTick>
 80036a6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036a8:	4b5d      	ldr	r3, [pc, #372]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd fdf3 	bl	80012a0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0a7      	b.n	8003818 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80036c8:	4b55      	ldr	r3, [pc, #340]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80036da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80036e0:	f7fd fdde 	bl	80012a0 <HAL_GetTick>
 80036e4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80036e6:	4b4e      	ldr	r3, [pc, #312]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ee:	f7fd fdd7 	bl	80012a0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e089      	b.n	8003818 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_DeInit+0x184>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003710:	f7fd fdc6 	bl	80012a0 <HAL_GetTick>
 8003714:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003716:	4b42      	ldr	r3, [pc, #264]	; (8003820 <HAL_RCC_DeInit+0x184>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a41      	ldr	r2, [pc, #260]	; (8003820 <HAL_RCC_DeInit+0x184>)
 800371c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003720:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd fdbc 	bl	80012a0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e070      	b.n	8003818 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_RCC_DeInit+0x184>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003742:	f7fd fdad 	bl	80012a0 <HAL_GetTick>
 8003746:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003748:	4b35      	ldr	r3, [pc, #212]	; (8003820 <HAL_RCC_DeInit+0x184>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a34      	ldr	r2, [pc, #208]	; (8003820 <HAL_RCC_DeInit+0x184>)
 800374e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd fda3 	bl	80012a0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e057      	b.n	8003818 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_DeInit+0x184>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003774:	f7fd fd94 	bl	80012a0 <HAL_GetTick>
 8003778:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_DeInit+0x184>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a28      	ldr	r2, [pc, #160]	; (8003820 <HAL_RCC_DeInit+0x184>)
 8003780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003784:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003788:	f7fd fd8a 	bl	80012a0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03e      	b.n	8003818 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCC_DeInit+0x184>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_RCC_DeInit+0x188>)
 80037aa:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037ae:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_RCC_DeInit+0x18c>)
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80037be:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ca:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037d2:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80037d6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037e2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_RCC_DeInit+0x184>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_DeInit+0x190>)
 80037fe:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <HAL_RCC_DeInit+0x194>)
 8003800:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <HAL_RCC_DeInit+0x198>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fd06 	bl	8001218 <HAL_InitTick>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003816:	2300      	movs	r3, #0
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	04003010 	.word	0x04003010
 8003828:	20003000 	.word	0x20003000
 800382c:	20000000 	.word	0x20000000
 8003830:	00f42400 	.word	0x00f42400
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd fa17 	bl	8000c90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f814 	bl	8003898 <HAL_SD_InitCard>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e00a      	b.n	8003890 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af04      	add	r7, sp, #16
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80038b4:	2376      	movs	r3, #118	; 0x76
 80038b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681d      	ldr	r5, [r3, #0]
 80038bc:	466c      	mov	r4, sp
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d0:	4628      	mov	r0, r5
 80038d2:	f001 fe01 	bl	80054d8 <SDIO_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04f      	b.n	8003988 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_SD_InitCard+0xf8>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fe39 	bl	800556a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_SD_InitCard+0xf8>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80038fe:	2002      	movs	r0, #2
 8003900:	f7fd fcda 	bl	80012b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f001 f825 	bl	8004954 <SD_PowerON>
 800390a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e02e      	b.n	8003988 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff44 	bl	80047b8 <SD_InitCard>
 8003930:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e01b      	b.n	8003988 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fea6 	bl	80056aa <SDMMC_CmdBlockLength>
 800395e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00f      	beq.n	8003986 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <HAL_SD_InitCard+0xfc>)
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bdb0      	pop	{r4, r5, r7, pc}
 8003990:	422580a0 	.word	0x422580a0
 8003994:	004005ff 	.word	0x004005ff

08003998 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e011      	b.n	80039ce <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2203      	movs	r2, #3
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f001 f85c 	bl	8004a70 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fd fa69 	bl	8000e90 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0c0      	b.n	8003b82 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 80b9 	bne.w	8003b80 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	441a      	add	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d907      	bls.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0a7      	b.n	8003b82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2203      	movs	r2, #3
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	4a4b      	ldr	r2, [pc, #300]	; (8003b90 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003a64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3380      	adds	r3, #128	; 0x80
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	025b      	lsls	r3, r3, #9
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	f7fe f90f 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e050      	b.n	8003b82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d002      	beq.n	8003af4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	025b      	lsls	r3, r3, #9
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	025b      	lsls	r3, r3, #9
 8003afe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b00:	2390      	movs	r3, #144	; 0x90
 8003b02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b04:	2302      	movs	r3, #2
 8003b06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f107 0210 	add.w	r2, r7, #16
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fd99 	bl	8005652 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d90a      	bls.n	8003b3c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2282      	movs	r2, #130	; 0x82
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fdfd 	bl	8005732 <SDMMC_CmdReadMultiBlock>
 8003b38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b3a:	e009      	b.n	8003b50 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2281      	movs	r2, #129	; 0x81
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fdd0 	bl	80056ee <SDMMC_CmdReadSingleBlock>
 8003b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e002      	b.n	8003b82 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3730      	adds	r7, #48	; 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	080045c7 	.word	0x080045c7
 8003b90:	08004639 	.word	0x08004639
 8003b94:	004005ff 	.word	0x004005ff
 8003b98:	4225858c 	.word	0x4225858c

08003b9c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	; 0x30
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0c5      	b.n	8003d50 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 80be 	bne.w	8003d4e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	441a      	add	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d907      	bls.n	8003bf6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0ac      	b.n	8003d50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	4a4d      	ldr	r2, [pc, #308]	; (8003d5c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003c28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2200      	movs	r2, #0
 8003c30:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d002      	beq.n	8003c40 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	025b      	lsls	r3, r3, #9
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d90a      	bls.n	8003c5c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22a0      	movs	r2, #160	; 0xa0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fdb1 	bl	80057ba <SDMMC_CmdWriteMultiBlock>
 8003c58:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c5a:	e009      	b.n	8003c70 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2290      	movs	r2, #144	; 0x90
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fd84 	bl	8005776 <SDMMC_CmdWriteSingleBlock>
 8003c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d012      	beq.n	8003c9c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a39      	ldr	r2, [pc, #228]	; (8003d60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e059      	b.n	8003d50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3380      	adds	r3, #128	; 0x80
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	025b      	lsls	r3, r3, #9
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	f7fd fff5 	bl	8001cc8 <HAL_DMA_Start_IT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003cf2:	f023 0302 	bic.w	r3, r3, #2
 8003cf6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e018      	b.n	8003d50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	025b      	lsls	r3, r3, #9
 8003d28:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d2a:	2390      	movs	r3, #144	; 0x90
 8003d2c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f107 0210 	add.w	r2, r7, #16
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fc84 	bl	8005652 <SDIO_ConfigData>

      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3730      	adds	r7, #48	; 0x30
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	0800459d 	.word	0x0800459d
 8003d5c:	08004639 	.word	0x08004639
 8003d60:	004005ff 	.word	0x004005ff
 8003d64:	4225858c 	.word	0x4225858c

08003d68 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_SD_IRQHandler+0x2e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 f80c 	bl	8004dac <SD_Read_IT>
 8003d94:	e165      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 808f 	beq.w	8003ec4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003dbe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003dc2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d039      	beq.n	8003e52 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <HAL_SD_IRQHandler+0x8a>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d011      	beq.n	8003e16 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fd02 	bl	8005800 <SDMMC_CmdStopTransfer>
 8003dfc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f92f 	bl	8004074 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_SD_IRQHandler+0xda>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f002 f970 	bl	8006128 <HAL_SD_RxCpltCallback>
 8003e48:	e10b      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f002 f962 	bl	8006114 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e50:	e107      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8102 	beq.w	8004062 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d011      	beq.n	8003e8c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 fcc7 	bl	8005800 <SDMMC_CmdStopTransfer>
 8003e72:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f8f4 	bl	8004074 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 80e5 	bne.w	8004062 <HAL_SD_IRQHandler+0x2fa>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 80df 	bne.w	8004062 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0208 	bic.w	r2, r2, #8
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f002 f929 	bl	8006114 <HAL_SD_TxCpltCallback>
}
 8003ec2:	e0ce      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_SD_IRQHandler+0x17c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 ffb6 	bl	8004e4e <SD_Write_IT>
 8003ee2:	e0be      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	f240 233a 	movw	r3, #570	; 0x23a
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80b6 	beq.w	8004062 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	f043 0202 	orr.w	r2, r3, #2
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	f043 0210 	orr.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	f043 0208 	orr.w	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f240 723a 	movw	r2, #1850	; 0x73a
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003f90:	f023 0302 	bic.w	r3, r3, #2
 8003f94:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fc30 	bl	8005800 <SDMMC_CmdStopTransfer>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f855 	bl	8004074 <HAL_SD_ErrorCallback>
}
 8003fca:	e04a      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d045      	beq.n	8004062 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_SD_IRQHandler+0x282>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_SD_IRQHandler+0x304>)
 8003ff0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd febe 	bl	8001d78 <HAL_DMA_Abort_IT>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02f      	beq.n	8004062 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fb68 	bl	80046dc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800400c:	e029      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <HAL_SD_IRQHandler+0x2ba>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d011      	beq.n	8004046 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_SD_IRQHandler+0x308>)
 8004028:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fea2 	bl	8001d78 <HAL_DMA_Abort_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d013      	beq.n	8004062 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fb83 	bl	800474a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004044:	e00d      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f002 f850 	bl	8006100 <HAL_SD_AbortCallback>
}
 8004060:	e7ff      	b.n	8004062 <HAL_SD_IRQHandler+0x2fa>
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	080046dd 	.word	0x080046dd
 8004070:	0800474b 	.word	0x0800474b

08004074 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004096:	0f9b      	lsrs	r3, r3, #30
 8004098:	b2da      	uxtb	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a2:	0e9b      	lsrs	r3, r3, #26
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b4:	0e1b      	lsrs	r3, r3, #24
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e8:	0d1b      	lsrs	r3, r3, #20
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004106:	0bdb      	lsrs	r3, r3, #15
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004118:	0b9b      	lsrs	r3, r3, #14
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	b2da      	uxtb	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412a:	0b5b      	lsrs	r3, r3, #13
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413c:	0b1b      	lsrs	r3, r3, #12
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2200      	movs	r2, #0
 800414e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	2b00      	cmp	r3, #0
 8004156:	d163      	bne.n	8004220 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415c:	009a      	lsls	r2, r3, #2
 800415e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004162:	4013      	ands	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004168:	0f92      	lsrs	r2, r2, #30
 800416a:	431a      	orrs	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004174:	0edb      	lsrs	r3, r3, #27
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004186:	0e1b      	lsrs	r3, r3, #24
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	b2da      	uxtb	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004198:	0d5b      	lsrs	r3, r3, #21
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041aa:	0c9b      	lsrs	r3, r3, #18
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041bc:	0bdb      	lsrs	r3, r3, #15
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7e1b      	ldrb	r3, [r3, #24]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	3302      	adds	r3, #2
 80041e0:	2201      	movs	r2, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041ea:	fb03 f202 	mul.w	r2, r3, r2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	7a1b      	ldrb	r3, [r3, #8]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800420c:	0a52      	lsrs	r2, r2, #9
 800420e:	fb03 f202 	mul.w	r2, r3, r2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421c:	661a      	str	r2, [r3, #96]	; 0x60
 800421e:	e031      	b.n	8004284 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11d      	bne.n	8004264 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	431a      	orrs	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	3301      	adds	r3, #1
 8004244:	029a      	lsls	r2, r3, #10
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004258:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	661a      	str	r2, [r3, #96]	; 0x60
 8004262:	e00f      	b.n	8004284 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_SD_GetCardCSD+0x344>)
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e09d      	b.n	80043c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	0b9b      	lsrs	r3, r3, #14
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429a:	09db      	lsrs	r3, r3, #7
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	0fdb      	lsrs	r3, r3, #31
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	0f5b      	lsrs	r3, r3, #29
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	0e9b      	lsrs	r3, r3, #26
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	0d9b      	lsrs	r3, r3, #22
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	0d5b      	lsrs	r3, r3, #21
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	0c1b      	lsrs	r3, r3, #16
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	0bdb      	lsrs	r3, r3, #15
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	0b9b      	lsrs	r3, r3, #14
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	0b5b      	lsrs	r3, r3, #13
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	0b1b      	lsrs	r3, r3, #12
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	0a9b      	lsrs	r3, r3, #10
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	b2da      	uxtb	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	b2da      	uxtb	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	004005ff 	.word	0x004005ff

080043d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004428:	b5b0      	push	{r4, r5, r7, lr}
 800442a:	b08e      	sub	sp, #56	; 0x38
 800442c:	af04      	add	r7, sp, #16
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2203      	movs	r2, #3
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	2b03      	cmp	r3, #3
 8004446:	d02e      	beq.n	80044a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444e:	d106      	bne.n	800445e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
 800445c:	e029      	b.n	80044b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	d10a      	bne.n	800447c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fb37 	bl	8004ada <SD_WideBus_Enable>
 800446c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
 800447a:	e01a      	b.n	80044b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fb74 	bl	8004b70 <SD_WideBus_Disable>
 8004488:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
 8004496:	e00c      	b.n	80044b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
 80044a4:	e005      	b.n	80044b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a26      	ldr	r2, [pc, #152]	; (8004558 <HAL_SD_ConfigWideBusOperation+0x130>)
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044d0:	e01f      	b.n	8004512 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681d      	ldr	r5, [r3, #0]
 80044f8:	466c      	mov	r4, sp
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450c:	4628      	mov	r0, r5
 800450e:	f000 ffe3 	bl	80054d8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f8c5 	bl	80056aa <SDMMC_CmdBlockLength>
 8004520:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00c      	beq.n	8004542 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <HAL_SD_ConfigWideBusOperation+0x130>)
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800454a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800454e:	4618      	mov	r0, r3
 8004550:	3728      	adds	r7, #40	; 0x28
 8004552:	46bd      	mov	sp, r7
 8004554:	bdb0      	pop	{r4, r5, r7, pc}
 8004556:	bf00      	nop
 8004558:	004005ff 	.word	0x004005ff

0800455c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa8b 	bl	8004a8a <SD_SendStatus>
 8004574:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	0a5b      	lsrs	r3, r3, #9
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004592:	693b      	ldr	r3, [r7, #16]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	2b82      	cmp	r3, #130	; 0x82
 80045da:	d111      	bne.n	8004600 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 f90d 	bl	8005800 <SDMMC_CmdStopTransfer>
 80045e6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fd3a 	bl	8004074 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0208 	bic.w	r2, r2, #8
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f240 523a 	movw	r2, #1338	; 0x53a
 8004618:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f001 fd7d 	bl	8006128 <HAL_SD_RxCpltCallback>
#endif
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd fd42 	bl	80020d0 <HAL_DMA_GetError>
 800464c:	4603      	mov	r3, r0
 800464e:	2b02      	cmp	r3, #2
 8004650:	d03e      	beq.n	80046d0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d002      	beq.n	800466e <SD_DMAError+0x36>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d12d      	bne.n	80046ca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <SD_DMAError+0xa0>)
 8004674:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff ff62 	bl	800455c <HAL_SD_GetCardState>
 8004698:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b06      	cmp	r3, #6
 800469e:	d002      	beq.n	80046a6 <SD_DMAError+0x6e>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d10a      	bne.n	80046bc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 f8a8 	bl	8005800 <SDMMC_CmdStopTransfer>
 80046b0:	4602      	mov	r2, r0
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	431a      	orrs	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7ff fcd2 	bl	8004074 <HAL_SD_ErrorCallback>
#endif
  }
}
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	004005ff 	.word	0x004005ff

080046dc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ff31 	bl	800455c <HAL_SD_GetCardState>
 80046fa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d002      	beq.n	8004716 <SD_DMATxAbort+0x3a>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b05      	cmp	r3, #5
 8004714:	d10a      	bne.n	800472c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f001 f870 	bl	8005800 <SDMMC_CmdStopTransfer>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f001 fce3 	bl	8006100 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800473a:	e002      	b.n	8004742 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fc99 	bl	8004074 <HAL_SD_ErrorCallback>
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004760:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fefa 	bl	800455c <HAL_SD_GetCardState>
 8004768:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b06      	cmp	r3, #6
 800477c:	d002      	beq.n	8004784 <SD_DMARxAbort+0x3a>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d10a      	bne.n	800479a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f001 f839 	bl	8005800 <SDMMC_CmdStopTransfer>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f001 fcac 	bl	8006100 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047a8:	e002      	b.n	80047b0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fc62 	bl	8004074 <HAL_SD_ErrorCallback>
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b094      	sub	sp, #80	; 0x50
 80047bc:	af04      	add	r7, sp, #16
 80047be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80047c0:	2301      	movs	r3, #1
 80047c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 feea 	bl	80055a2 <SDIO_GetPowerState>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047d8:	e0b8      	b.n	800494c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d02f      	beq.n	8004842 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 f914 	bl	8005a14 <SDMMC_CmdSendCID>
 80047ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80047f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f6:	e0a9      	b.n	800494c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 ff14 	bl	800562c <SDIO_GetResponse>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2104      	movs	r1, #4
 8004810:	4618      	mov	r0, r3
 8004812:	f000 ff0b 	bl	800562c <SDIO_GetResponse>
 8004816:	4602      	mov	r2, r0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2108      	movs	r1, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ff02 	bl	800562c <SDIO_GetResponse>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	210c      	movs	r1, #12
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fef9 	bl	800562c <SDIO_GetResponse>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	2b03      	cmp	r3, #3
 8004848:	d00d      	beq.n	8004866 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f107 020e 	add.w	r2, r7, #14
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f91a 	bl	8005a8e <SDMMC_CmdSetRelAdd>
 800485a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <SD_InitCard+0xae>
    {
      return errorstate;
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	e072      	b.n	800494c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	2b03      	cmp	r3, #3
 800486c:	d036      	beq.n	80048dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800486e:	89fb      	ldrh	r3, [r7, #14]
 8004870:	461a      	mov	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f001 f8e4 	bl	8005a50 <SDMMC_CmdSendCSD>
 8004888:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800488a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	e05b      	b.n	800494c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fec6 	bl	800562c <SDIO_GetResponse>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2104      	movs	r1, #4
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 febd 	bl	800562c <SDIO_GetResponse>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2108      	movs	r1, #8
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 feb4 	bl	800562c <SDIO_GetResponse>
 80048c4:	4602      	mov	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	210c      	movs	r1, #12
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 feab 	bl	800562c <SDIO_GetResponse>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2104      	movs	r1, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fea2 	bl	800562c <SDIO_GetResponse>
 80048e8:	4603      	mov	r3, r0
 80048ea:	0d1a      	lsrs	r2, r3, #20
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048f0:	f107 0310 	add.w	r3, r7, #16
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fbc6 	bl	8004088 <HAL_SD_GetCardCSD>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004902:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004906:	e021      	b.n	800494c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6819      	ldr	r1, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	2200      	movs	r2, #0
 8004914:	461c      	mov	r4, r3
 8004916:	4615      	mov	r5, r2
 8004918:	4622      	mov	r2, r4
 800491a:	462b      	mov	r3, r5
 800491c:	4608      	mov	r0, r1
 800491e:	f000 ff91 	bl	8005844 <SDMMC_CmdSelDesel>
 8004922:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <SD_InitCard+0x176>
  {
    return errorstate;
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	e00e      	b.n	800494c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681d      	ldr	r5, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	466c      	mov	r4, sp
 8004936:	f103 0210 	add.w	r2, r3, #16
 800493a:	ca07      	ldmia	r2, {r0, r1, r2}
 800493c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004940:	3304      	adds	r3, #4
 8004942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004944:	4628      	mov	r0, r5
 8004946:	f000 fdc7 	bl	80054d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3740      	adds	r7, #64	; 0x40
 8004950:	46bd      	mov	sp, r7
 8004952:	bdb0      	pop	{r4, r5, r7, pc}

08004954 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 ff8c 	bl	800588a <SDMMC_CmdGoIdleState>
 8004972:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <SD_PowerON+0x2a>
  {
    return errorstate;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	e072      	b.n	8004a64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 ff9f 	bl	80058c6 <SDMMC_CmdOperCond>
 8004988:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ff75 	bl	800588a <SDMMC_CmdGoIdleState>
 80049a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	e05b      	b.n	8004a64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d137      	bne.n	8004a2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 ff9f 	bl	8005904 <SDMMC_CmdAppCommand>
 80049c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d02d      	beq.n	8004a2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049d2:	e047      	b.n	8004a64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ff92 	bl	8005904 <SDMMC_CmdAppCommand>
 80049e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <SD_PowerON+0x98>
    {
      return errorstate;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	e03b      	b.n	8004a64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	491e      	ldr	r1, [pc, #120]	; (8004a6c <SD_PowerON+0x118>)
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 ffa8 	bl	8005948 <SDMMC_CmdAppOperCommand>
 80049f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a04:	e02e      	b.n	8004a64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fe0d 	bl	800562c <SDIO_GetResponse>
 8004a12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	0fdb      	lsrs	r3, r3, #31
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <SD_PowerON+0xcc>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <SD_PowerON+0xce>
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]

    count++;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d802      	bhi.n	8004a3a <SD_PowerON+0xe6>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0cc      	beq.n	80049d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d902      	bls.n	8004a4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a48:	e00c      	b.n	8004a64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
 8004a5a:	e002      	b.n	8004a62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	c1100000 	.word	0xc1100000

08004a70 <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd82 	bl	8005586 <SDIO_PowerState_OFF>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a9e:	e018      	b.n	8004ad2 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f001 f80f 	bl	8005ad0 <SDMMC_CmdSendStatus>
 8004ab2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <SD_SendStatus+0x34>
  {
    return errorstate;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	e009      	b.n	8004ad2 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fdb1 	bl	800562c <SDIO_GetResponse>
 8004aca:	4602      	mov	r2, r0
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fd9b 	bl	800562c <SDIO_GetResponse>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b00:	d102      	bne.n	8004b08 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b06:	e02f      	b.n	8004b68 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f879 	bl	8004c06 <SD_FindSCR>
 8004b14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	e023      	b.n	8004b68 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01c      	beq.n	8004b64 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 fee4 	bl	8005904 <SDMMC_CmdAppCommand>
 8004b3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	e00f      	b.n	8004b68 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ff1d 	bl	800598e <SDMMC_CmdBusWidth>
 8004b54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	e003      	b.n	8004b68 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e001      	b.n	8004b68 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd50 	bl	800562c <SDIO_GetResponse>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b96:	d102      	bne.n	8004b9e <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b9c:	e02f      	b.n	8004bfe <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f82e 	bl	8004c06 <SD_FindSCR>
 8004baa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	e023      	b.n	8004bfe <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01c      	beq.n	8004bfa <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f000 fe99 	bl	8005904 <SDMMC_CmdAppCommand>
 8004bd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	e00f      	b.n	8004bfe <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fed2 	bl	800598e <SDMMC_CmdBusWidth>
 8004bea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	e003      	b.n	8004bfe <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e001      	b.n	8004bfe <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c06:	b590      	push	{r4, r7, lr}
 8004c08:	b08f      	sub	sp, #60	; 0x3c
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fc fb46 	bl	80012a0 <HAL_GetTick>
 8004c14:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fd3c 	bl	80056aa <SDMMC_CmdBlockLength>
 8004c32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <SD_FindSCR+0x38>
  {
    return errorstate;
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	e0b2      	b.n	8004da4 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fe5a 	bl	8005904 <SDMMC_CmdAppCommand>
 8004c50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	e0a3      	b.n	8004da4 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c62:	2308      	movs	r3, #8
 8004c64:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c66:	2330      	movs	r3, #48	; 0x30
 8004c68:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f107 0210 	add.w	r2, r7, #16
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fce6 	bl	8005652 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fea1 	bl	80059d2 <SDMMC_CmdSendSCR>
 8004c90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02a      	beq.n	8004cee <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	e083      	b.n	8004da4 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00f      	beq.n	8004cca <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	f107 0208 	add.w	r2, r7, #8
 8004cb6:	18d4      	adds	r4, r2, r3
 8004cb8:	4608      	mov	r0, r1
 8004cba:	f000 fc38 	bl	800552e <SDIO_ReadFIFO>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	6023      	str	r3, [r4, #0]
      index++;
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc8:	e006      	b.n	8004cd8 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004cd8:	f7fc fae2 	bl	80012a0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d102      	bne.n	8004cee <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ce8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cec:	e05a      	b.n	8004da4 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0cf      	beq.n	8004c9c <SD_FindSCR+0x96>
 8004cfc:	e000      	b.n	8004d00 <SD_FindSCR+0xfa>
      break;
 8004cfe:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2208      	movs	r2, #8
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d16:	2308      	movs	r3, #8
 8004d18:	e044      	b.n	8004da4 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d30:	2302      	movs	r3, #2
 8004d32:	e037      	b.n	8004da4 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2220      	movs	r2, #32
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	e02a      	b.n	8004da4 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	061a      	lsls	r2, r3, #24
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	0e1b      	lsrs	r3, r3, #24
 8004d74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	601a      	str	r2, [r3, #0]
    scr++;
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	061a      	lsls	r2, r3, #24
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	0e1b      	lsrs	r3, r3, #24
 8004d9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	373c      	adds	r7, #60	; 0x3c
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd90      	pop	{r4, r7, pc}

08004dac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03f      	beq.n	8004e46 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e033      	b.n	8004e34 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fbac 	bl	800552e <SDIO_ReadFIFO>
 8004dd6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	0e1b      	lsrs	r3, r3, #24
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3301      	adds	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	d9c8      	bls.n	8004dcc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004e46:	bf00      	nop
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d043      	beq.n	8004ef0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e037      	b.n	8004ede <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	021a      	lsls	r2, r3, #8
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	041a      	lsls	r2, r3, #16
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	061a      	lsls	r2, r3, #24
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f107 0208 	add.w	r2, r7, #8
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb38 	bl	8005548 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b07      	cmp	r3, #7
 8004ee2:	d9c4      	bls.n	8004e6e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e03f      	b.n	8004f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc f894 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f857 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e021      	b.n	8004fe8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	; 0x24
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fba:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fc f88d 	bl	80010dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	; 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <UART_SetConfig+0x2cc>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8d      	ldr	r3, [pc, #564]	; (80052c0 <UART_SetConfig+0x2d0>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe faf0 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fe fad7 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	f040 810c 	bne.w	80052c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050d2:	4621      	mov	r1, r4
 80050d4:	eb12 0801 	adds.w	r8, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0901 	adc.w	r9, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f2:	4690      	mov	r8, r2
 80050f4:	4699      	mov	r9, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb18 0303 	adds.w	r3, r8, r3
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005100:	462b      	mov	r3, r5
 8005102:	eb49 0303 	adc.w	r3, r9, r3
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	18db      	adds	r3, r3, r3
 8005122:	653b      	str	r3, [r7, #80]	; 0x50
 8005124:	4613      	mov	r3, r2
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	657b      	str	r3, [r7, #84]	; 0x54
 800512c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005134:	f7fb f850 	bl	80001d8 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <UART_SetConfig+0x2d4>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005160:	415b      	adcs	r3, r3
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005168:	4641      	mov	r1, r8
 800516a:	eb12 0a01 	adds.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0b01 	adc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	4692      	mov	sl, r2
 800518a:	469b      	mov	fp, r3
 800518c:	4643      	mov	r3, r8
 800518e:	eb1a 0303 	adds.w	r3, sl, r3
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005196:	464b      	mov	r3, r9
 8005198:	eb4b 0303 	adc.w	r3, fp, r3
 800519c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ca:	f7fb f805 	bl	80001d8 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	; 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051ec:	fba3 2302 	umull	r2, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	63b9      	str	r1, [r7, #56]	; 0x38
 8005214:	415b      	adcs	r3, r3
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6339      	str	r1, [r7, #48]	; 0x30
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800526c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005270:	460b      	mov	r3, r1
 8005272:	18db      	adds	r3, r3, r3
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	4613      	mov	r3, r2
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005286:	f7fa ffa7 	bl	80001d8 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <UART_SetConfig+0x2d4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	; 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3332      	adds	r3, #50	; 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <UART_SetConfig+0x2d4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0207 	and.w	r2, r3, #7
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b8:	e105      	b.n	80054c6 <UART_SetConfig+0x4d6>
 80052ba:	bf00      	nop
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	6239      	str	r1, [r7, #32]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb43 0501 	adc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005310:	464b      	mov	r3, r9
 8005312:	eb45 0303 	adc.w	r3, r5, r3
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005336:	4629      	mov	r1, r5
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005340:	4621      	mov	r1, r4
 8005342:	008a      	lsls	r2, r1, #2
 8005344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005348:	f7fa ff46 	bl	80001d8 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	61b9      	str	r1, [r7, #24]
 8005374:	415b      	adcs	r3, r3
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6139      	str	r1, [r7, #16]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053d4:	4649      	mov	r1, r9
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	4641      	mov	r1, r8
 80053da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053de:	4641      	mov	r1, r8
 80053e0:	008a      	lsls	r2, r1, #2
 80053e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053e6:	f7fa fef7 	bl	80001d8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <UART_SetConfig+0x4e4>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540e:	441c      	add	r4, r3
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	673b      	str	r3, [r7, #112]	; 0x70
 8005418:	677a      	str	r2, [r7, #116]	; 0x74
 800541a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	1891      	adds	r1, r2, r2
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	415b      	adcs	r3, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	4641      	mov	r1, r8
 8005430:	1851      	adds	r1, r2, r1
 8005432:	6039      	str	r1, [r7, #0]
 8005434:	4649      	mov	r1, r9
 8005436:	414b      	adcs	r3, r1
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005446:	4659      	mov	r1, fp
 8005448:	00cb      	lsls	r3, r1, #3
 800544a:	4651      	mov	r1, sl
 800544c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005450:	4651      	mov	r1, sl
 8005452:	00ca      	lsls	r2, r1, #3
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	4603      	mov	r3, r0
 800545a:	4642      	mov	r2, r8
 800545c:	189b      	adds	r3, r3, r2
 800545e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	663b      	str	r3, [r7, #96]	; 0x60
 8005474:	667a      	str	r2, [r7, #100]	; 0x64
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005482:	4649      	mov	r1, r9
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	4641      	mov	r1, r8
 8005488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548c:	4641      	mov	r1, r8
 800548e:	008a      	lsls	r2, r1, #2
 8005490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005494:	f7fa fea0 	bl	80001d8 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x4e4>)
 800549e:	fba3 1302 	umull	r1, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x4e4>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4422      	add	r2, r4
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	bf00      	nop
 80054c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d2:	bf00      	nop
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80054d8:	b084      	sub	sp, #16
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	f107 001c 	add.w	r0, r7, #28
 80054e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80054ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80054f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80054f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80054f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80054fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80054fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005502:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	b004      	add	sp, #16
 800552c:	4770      	bx	lr

0800552e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2203      	movs	r2, #3
 8005576:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0303 	and.w	r3, r3, #3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80055e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80055e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055f8:	f023 030f 	bic.w	r3, r3, #15
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	b2db      	uxtb	r3, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3314      	adds	r3, #20
 800563a:	461a      	mov	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	4413      	add	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
}  
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005678:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800567e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005684:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0

}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b088      	sub	sp, #32
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80056b8:	2310      	movs	r3, #16
 80056ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff74 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	2110      	movs	r1, #16
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa19 	bl	8005b14 <SDMMC_GetCmdResp1>
 80056e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e4:	69fb      	ldr	r3, [r7, #28]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80056fc:	2311      	movs	r3, #17
 80056fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005700:	2340      	movs	r3, #64	; 0x40
 8005702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800570e:	f107 0308 	add.w	r3, r7, #8
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff52 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800571a:	f241 3288 	movw	r2, #5000	; 0x1388
 800571e:	2111      	movs	r1, #17
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9f7 	bl	8005b14 <SDMMC_GetCmdResp1>
 8005726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005728:	69fb      	ldr	r3, [r7, #28]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b088      	sub	sp, #32
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005740:	2312      	movs	r3, #18
 8005742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800574c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005750:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff30 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	2112      	movs	r1, #18
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9d5 	bl	8005b14 <SDMMC_GetCmdResp1>
 800576a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800576c:	69fb      	ldr	r3, [r7, #28]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b088      	sub	sp, #32
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005784:	2318      	movs	r3, #24
 8005786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff0e 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	2118      	movs	r1, #24
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9b3 	bl	8005b14 <SDMMC_GetCmdResp1>
 80057ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057b0:	69fb      	ldr	r3, [r7, #28]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b088      	sub	sp, #32
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80057c8:	2319      	movs	r3, #25
 80057ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057cc:	2340      	movs	r3, #64	; 0x40
 80057ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff feec 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	2119      	movs	r1, #25
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f991 	bl	8005b14 <SDMMC_GetCmdResp1>
 80057f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057f4:	69fb      	ldr	r3, [r7, #28]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800580c:	230c      	movs	r3, #12
 800580e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800581c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff feca 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800582a:	4a05      	ldr	r2, [pc, #20]	; (8005840 <SDMMC_CmdStopTransfer+0x40>)
 800582c:	210c      	movs	r1, #12
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f970 	bl	8005b14 <SDMMC_GetCmdResp1>
 8005834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005836:	69fb      	ldr	r3, [r7, #28]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	05f5e100 	.word	0x05f5e100

08005844 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005854:	2307      	movs	r3, #7
 8005856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005858:	2340      	movs	r3, #64	; 0x40
 800585a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005864:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005866:	f107 0310 	add.w	r3, r7, #16
 800586a:	4619      	mov	r1, r3
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fea6 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	2107      	movs	r1, #7
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f94b 	bl	8005b14 <SDMMC_GetCmdResp1>
 800587e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005882:	4618      	mov	r0, r3
 8005884:	3728      	adds	r7, #40	; 0x28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058a8:	f107 0308 	add.w	r3, r7, #8
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fe85 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fb65 	bl	8005f84 <SDMMC_GetCmdError>
 80058ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058bc:	69fb      	ldr	r3, [r7, #28]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b088      	sub	sp, #32
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80058ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80058d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80058d4:	2308      	movs	r3, #8
 80058d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058e6:	f107 0308 	add.w	r3, r7, #8
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fe66 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 faf8 	bl	8005ee8 <SDMMC_GetCmdResp7>
 80058f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058fa:	69fb      	ldr	r3, [r7, #28]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005912:	2337      	movs	r3, #55	; 0x37
 8005914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800591e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005922:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005924:	f107 0308 	add.w	r3, r7, #8
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fe47 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005930:	f241 3288 	movw	r2, #5000	; 0x1388
 8005934:	2137      	movs	r1, #55	; 0x37
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8ec 	bl	8005b14 <SDMMC_GetCmdResp1>
 800593c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800593e:	69fb      	ldr	r3, [r7, #28]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800595c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800595e:	2329      	movs	r3, #41	; 0x29
 8005960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005962:	2340      	movs	r3, #64	; 0x40
 8005964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800596a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005970:	f107 0308 	add.w	r3, r7, #8
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe21 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f9ff 	bl	8005d80 <SDMMC_GetCmdResp3>
 8005982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005984:	69fb      	ldr	r3, [r7, #28]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b088      	sub	sp, #32
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800599c:	2306      	movs	r3, #6
 800599e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059a0:	2340      	movs	r3, #64	; 0x40
 80059a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fe02 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	2106      	movs	r1, #6
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8a7 	bl	8005b14 <SDMMC_GetCmdResp1>
 80059c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059c8:	69fb      	ldr	r3, [r7, #28]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80059de:	2333      	movs	r3, #51	; 0x33
 80059e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059f0:	f107 0308 	add.w	r3, r7, #8
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fde1 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80059fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a00:	2133      	movs	r1, #51	; 0x33
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f886 	bl	8005b14 <SDMMC_GetCmdResp1>
 8005a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a20:	2302      	movs	r3, #2
 8005a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a24:	23c0      	movs	r3, #192	; 0xc0
 8005a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fdc0 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f956 	bl	8005cf0 <SDMMC_GetCmdResp2>
 8005a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a5e:	2309      	movs	r3, #9
 8005a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a62:	23c0      	movs	r3, #192	; 0xc0
 8005a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a70:	f107 0308 	add.w	r3, r7, #8
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fda1 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f937 	bl	8005cf0 <SDMMC_GetCmdResp2>
 8005a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a84:	69fb      	ldr	r3, [r7, #28]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b088      	sub	sp, #32
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aae:	f107 0308 	add.w	r3, r7, #8
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fd82 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	2103      	movs	r1, #3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f99c 	bl	8005dfc <SDMMC_GetCmdResp6>
 8005ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005ade:	230d      	movs	r3, #13
 8005ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005af0:	f107 0308 	add.w	r3, r7, #8
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fd61 	bl	80055be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b00:	210d      	movs	r1, #13
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f806 	bl	8005b14 <SDMMC_GetCmdResp1>
 8005b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b22:	4b70      	ldr	r3, [pc, #448]	; (8005ce4 <SDMMC_GetCmdResp1+0x1d0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a70      	ldr	r2, [pc, #448]	; (8005ce8 <SDMMC_GetCmdResp1+0x1d4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	0a5a      	lsrs	r2, r3, #9
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
 8005b34:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	1e5a      	subs	r2, r3, #1
 8005b3a:	61fa      	str	r2, [r7, #28]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b44:	e0c9      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ef      	beq.n	8005b36 <SDMMC_GetCmdResp1+0x22>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ea      	bne.n	8005b36 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2204      	movs	r2, #4
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b72:	2304      	movs	r3, #4
 8005b74:	e0b1      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0a6      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	22c5      	movs	r2, #197	; 0xc5
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fd3d 	bl	8005612 <SDIO_GetCommandResponse>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d001      	beq.n	8005ba6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e099      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff fd3f 	bl	800562c <SDIO_GetResponse>
 8005bae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4b4e      	ldr	r3, [pc, #312]	; (8005cec <SDMMC_GetCmdResp1+0x1d8>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e08d      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da02      	bge.n	8005bca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc8:	e087      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005bd4:	2340      	movs	r3, #64	; 0x40
 8005bd6:	e080      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	e079      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bf4:	e071      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c04:	e069      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c14:	e061      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c24:	e059      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c34:	e051      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c44:	e049      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c54:	e041      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c64:	e039      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c74:	e031      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c84:	e029      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c94:	e021      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ca4:	e019      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cb4:	e011      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005cc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cc4:	e009      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005cd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005cd4:	e001      	b.n	8005cda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000000 	.word	0x20000000
 8005ce8:	10624dd3 	.word	0x10624dd3
 8005cec:	fdffe008 	.word	0xfdffe008

08005cf0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cf8:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <SDMMC_GetCmdResp2+0x88>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <SDMMC_GetCmdResp2+0x8c>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	0a5b      	lsrs	r3, r3, #9
 8005d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	60fa      	str	r2, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d1c:	e026      	b.n	8005d6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0ef      	beq.n	8005d0e <SDMMC_GetCmdResp2+0x1e>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ea      	bne.n	8005d0e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	e00e      	b.n	8005d6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e003      	b.n	8005d6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	22c5      	movs	r2, #197	; 0xc5
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	20000000 	.word	0x20000000
 8005d7c:	10624dd3 	.word	0x10624dd3

08005d80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d88:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <SDMMC_GetCmdResp3+0x74>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <SDMMC_GetCmdResp3+0x78>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0a5b      	lsrs	r3, r3, #9
 8005d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005da8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dac:	e01b      	b.n	8005de6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ef      	beq.n	8005d9e <SDMMC_GetCmdResp3+0x1e>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1ea      	bne.n	8005d9e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dda:	2304      	movs	r3, #4
 8005ddc:	e003      	b.n	8005de6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	22c5      	movs	r2, #197	; 0xc5
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000000 	.word	0x20000000
 8005df8:	10624dd3 	.word	0x10624dd3

08005dfc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	460b      	mov	r3, r1
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e0a:	4b35      	ldr	r3, [pc, #212]	; (8005ee0 <SDMMC_GetCmdResp6+0xe4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a35      	ldr	r2, [pc, #212]	; (8005ee4 <SDMMC_GetCmdResp6+0xe8>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	0a5b      	lsrs	r3, r3, #9
 8005e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1e5a      	subs	r2, r3, #1
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e2e:	e052      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ef      	beq.n	8005e20 <SDMMC_GetCmdResp6+0x24>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1ea      	bne.n	8005e20 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	e03a      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e02f      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fbcb 	bl	8005612 <SDIO_GetCommandResponse>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d001      	beq.n	8005e8a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e025      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	22c5      	movs	r2, #197	; 0xc5
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e90:	2100      	movs	r1, #0
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fbca 	bl	800562c <SDIO_GetResponse>
 8005e98:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e011      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ec0:	e009      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed0:	e001      	b.n	8005ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000000 	.word	0x20000000
 8005ee4:	10624dd3 	.word	0x10624dd3

08005ee8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ef0:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <SDMMC_GetCmdResp7+0x94>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <SDMMC_GetCmdResp7+0x98>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	0a5b      	lsrs	r3, r3, #9
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	60fa      	str	r2, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f14:	e02c      	b.n	8005f70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0ef      	beq.n	8005f06 <SDMMC_GetCmdResp7+0x1e>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ea      	bne.n	8005f06 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f42:	2304      	movs	r3, #4
 8005f44:	e014      	b.n	8005f70 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e009      	b.n	8005f70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2240      	movs	r2, #64	; 0x40
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f6e:	2300      	movs	r3, #0
  
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20000000 	.word	0x20000000
 8005f80:	10624dd3 	.word	0x10624dd3

08005f84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <SDMMC_GetCmdError+0x50>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <SDMMC_GetCmdError+0x54>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0a5b      	lsrs	r3, r3, #9
 8005f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	60fa      	str	r2, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fb0:	e009      	b.n	8005fc6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f1      	beq.n	8005fa2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	22c5      	movs	r2, #197	; 0xc5
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000000 	.word	0x20000000
 8005fd8:	10624dd3 	.word	0x10624dd3

08005fdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005fe0:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <MX_FATFS_Init+0x18>)
 8005fe2:	4805      	ldr	r0, [pc, #20]	; (8005ff8 <MX_FATFS_Init+0x1c>)
 8005fe4:	f003 fd9c 	bl	8009b20 <FATFS_LinkDriver>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <MX_FATFS_Init+0x20>)
 8005fee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ff0:	bf00      	nop
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20012440 	.word	0x20012440
 8005ff8:	08009e6c 	.word	0x08009e6c
 8005ffc:	2001243c 	.word	0x2001243c

08006000 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006004:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006006:	4618      	mov	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800601a:	f000 f896 	bl	800614a <BSP_SD_IsDetected>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	d001      	beq.n	8006028 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e012      	b.n	800604e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006028:	480b      	ldr	r0, [pc, #44]	; (8006058 <BSP_SD_Init+0x48>)
 800602a:	f7fd fc05 	bl	8003838 <HAL_SD_Init>
 800602e:	4603      	mov	r3, r0
 8006030:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800603c:	4806      	ldr	r0, [pc, #24]	; (8006058 <BSP_SD_Init+0x48>)
 800603e:	f7fe f9f3 	bl	8004428 <HAL_SD_ConfigWideBusOperation>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800604c:	79fb      	ldrb	r3, [r7, #7]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20012290 	.word	0x20012290

0800605c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	4806      	ldr	r0, [pc, #24]	; (800608c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006074:	f7fd fcb0 	bl	80039d8 <HAL_SD_ReadBlocks_DMA>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20012290 	.word	0x20012290

08006090 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68f9      	ldr	r1, [r7, #12]
 80060a6:	4806      	ldr	r0, [pc, #24]	; (80060c0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80060a8:	f7fd fd78 	bl	8003b9c <HAL_SD_WriteBlocks_DMA>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20012290 	.word	0x20012290

080060c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80060c8:	4805      	ldr	r0, [pc, #20]	; (80060e0 <BSP_SD_GetCardState+0x1c>)
 80060ca:	f7fe fa47 	bl	800455c <HAL_SD_GetCardState>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
}
 80060da:	4618      	mov	r0, r3
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20012290 	.word	0x20012290

080060e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4803      	ldr	r0, [pc, #12]	; (80060fc <BSP_SD_GetCardInfo+0x18>)
 80060f0:	f7fe f96e 	bl	80043d0 <HAL_SD_GetCardInfo>
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20012290 	.word	0x20012290

08006100 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006108:	f000 f818 	bl	800613c <BSP_SD_AbortCallback>
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800611c:	f000 f9b2 	bl	8006484 <BSP_SD_WriteCpltCallback>
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006130:	f000 f9b4 	bl	800649c <BSP_SD_ReadCpltCallback>
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0

}
 8006140:	bf00      	nop
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006150:	2301      	movs	r3, #1
 8006152:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006154:	f000 f80c 	bl	8006170 <BSP_PlatformIsDetected>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800615e:	2300      	movs	r3, #0
 8006160:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	b2db      	uxtb	r3, r3
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006176:	2301      	movs	r3, #1
 8006178:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800617a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800617e:	480b      	ldr	r0, [pc, #44]	; (80061ac <BSP_PlatformIsDetected+0x3c>)
 8006180:	f7fc fe02 	bl	8002d88 <HAL_GPIO_ReadPin>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800618a:	2300      	movs	r3, #0
 800618c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    //https://github.com/adafruit/Adafruit-Feather-STM32F405-Express-PCB/issues/1
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET){	// carte présente = 1 (SET)
 800618e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006192:	4806      	ldr	r0, [pc, #24]	; (80061ac <BSP_PlatformIsDetected+0x3c>)
 8006194:	f7fc fdf8 	bl	8002d88 <HAL_GPIO_ReadPin>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <BSP_PlatformIsDetected+0x32>
    	status = SD_PRESENT;
 800619e:	2301      	movs	r3, #1
 80061a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE END 1 */
    return status;
 80061a2:	79fb      	ldrb	r3, [r7, #7]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40020400 	.word	0x40020400

080061b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80061b8:	f7fb f872 	bl	80012a0 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80061be:	e006      	b.n	80061ce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061c0:	f7ff ff80 	bl	80060c4 <BSP_SD_GetCardState>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e009      	b.n	80061e2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80061ce:	f7fb f867 	bl	80012a0 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d8f0      	bhi.n	80061c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <SD_CheckStatus+0x38>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80061fc:	f7ff ff62 	bl	80060c4 <BSP_SD_GetCardState>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <SD_CheckStatus+0x38>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	4b04      	ldr	r3, [pc, #16]	; (8006224 <SD_CheckStatus+0x38>)
 8006214:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006216:	4b03      	ldr	r3, [pc, #12]	; (8006224 <SD_CheckStatus+0x38>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b2db      	uxtb	r3, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000009 	.word	0x20000009

08006228 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006232:	f7ff feed 	bl	8006010 <BSP_SD_Init>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ffd4 	bl	80061ec <SD_CheckStatus>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <SD_initialize+0x34>)
 800624a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <SD_initialize+0x34>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b2db      	uxtb	r3, r3
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000009 	.word	0x20000009

08006260 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff ffbd 	bl	80061ec <SD_CheckStatus>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006290:	f247 5030 	movw	r0, #30000	; 0x7530
 8006294:	f7ff ff8c 	bl	80061b0 <SD_CheckStatusWithTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	da01      	bge.n	80062a2 <SD_read+0x26>
  {
    return res;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	e03b      	b.n	800631a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68b8      	ldr	r0, [r7, #8]
 80062a8:	f7ff fed8 	bl	800605c <BSP_SD_ReadBlocks_DMA>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d132      	bne.n	8006318 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <SD_read+0xa8>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80062b8:	f7fa fff2 	bl	80012a0 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062be:	bf00      	nop
 80062c0:	4b18      	ldr	r3, [pc, #96]	; (8006324 <SD_read+0xa8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d108      	bne.n	80062da <SD_read+0x5e>
 80062c8:	f7fa ffea 	bl	80012a0 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f247 522f 	movw	r2, #29999	; 0x752f
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d9f2      	bls.n	80062c0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <SD_read+0xa8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
 80062e6:	e017      	b.n	8006318 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80062e8:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <SD_read+0xa8>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80062ee:	f7fa ffd7 	bl	80012a0 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80062f4:	e007      	b.n	8006306 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80062f6:	f7ff fee5 	bl	80060c4 <BSP_SD_GetCardState>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <SD_read+0x8a>
          {
            res = RES_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006304:	e008      	b.n	8006318 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006306:	f7fa ffcb 	bl	80012a0 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f247 522f 	movw	r2, #29999	; 0x752f
 8006314:	4293      	cmp	r3, r2
 8006316:	d9ee      	bls.n	80062f6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20012448 	.word	0x20012448

08006328 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800633c:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <SD_write+0xa8>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006342:	f247 5030 	movw	r0, #30000	; 0x7530
 8006346:	f7ff ff33 	bl	80061b0 <SD_CheckStatusWithTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	da01      	bge.n	8006354 <SD_write+0x2c>
  {
    return res;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	e038      	b.n	80063c6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68b8      	ldr	r0, [r7, #8]
 800635a:	f7ff fe99 	bl	8006090 <BSP_SD_WriteBlocks_DMA>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d12f      	bne.n	80063c4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006364:	f7fa ff9c 	bl	80012a0 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800636a:	bf00      	nop
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <SD_write+0xa8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <SD_write+0x5e>
 8006374:	f7fa ff94 	bl	80012a0 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f247 522f 	movw	r2, #29999	; 0x752f
 8006382:	4293      	cmp	r3, r2
 8006384:	d9f2      	bls.n	800636c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <SD_write+0xa8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
 8006392:	e017      	b.n	80063c4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <SD_write+0xa8>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800639a:	f7fa ff81 	bl	80012a0 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063a0:	e007      	b.n	80063b2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063a2:	f7ff fe8f 	bl	80060c4 <BSP_SD_GetCardState>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <SD_write+0x8a>
          {
            res = RES_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	75fb      	strb	r3, [r7, #23]
            break;
 80063b0:	e008      	b.n	80063c4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063b2:	f7fa ff75 	bl	80012a0 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d9ee      	bls.n	80063a2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20012444 	.word	0x20012444

080063d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	603a      	str	r2, [r7, #0]
 80063de:	71fb      	strb	r3, [r7, #7]
 80063e0:	460b      	mov	r3, r1
 80063e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80063ea:	4b25      	ldr	r3, [pc, #148]	; (8006480 <SD_ioctl+0xac>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <SD_ioctl+0x28>
 80063f8:	2303      	movs	r3, #3
 80063fa:	e03c      	b.n	8006476 <SD_ioctl+0xa2>

  switch (cmd)
 80063fc:	79bb      	ldrb	r3, [r7, #6]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d834      	bhi.n	800646c <SD_ioctl+0x98>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <SD_ioctl+0x34>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006419 	.word	0x08006419
 800640c:	08006421 	.word	0x08006421
 8006410:	08006439 	.word	0x08006439
 8006414:	08006453 	.word	0x08006453
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800641e:	e028      	b.n	8006472 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006420:	f107 030c 	add.w	r3, r7, #12
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fe5d 	bl	80060e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006436:	e01c      	b.n	8006472 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006438:	f107 030c 	add.w	r3, r7, #12
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fe51 	bl	80060e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	b29a      	uxth	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006450:	e00f      	b.n	8006472 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fe44 	bl	80060e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	0a5a      	lsrs	r2, r3, #9
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800646a:	e002      	b.n	8006472 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800646c:	2304      	movs	r3, #4
 800646e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006476:	4618      	mov	r0, r3
 8006478:	3730      	adds	r7, #48	; 0x30
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000009 	.word	0x20000009

08006484 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006488:	4b03      	ldr	r3, [pc, #12]	; (8006498 <BSP_SD_WriteCpltCallback+0x14>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20012444 	.word	0x20012444

0800649c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <BSP_SD_ReadCpltCallback+0x14>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20012448 	.word	0x20012448

080064b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <disk_status+0x30>)
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	79fa      	ldrb	r2, [r7, #7]
 80064cc:	4905      	ldr	r1, [pc, #20]	; (80064e4 <disk_status+0x30>)
 80064ce:	440a      	add	r2, r1
 80064d0:	7a12      	ldrb	r2, [r2, #8]
 80064d2:	4610      	mov	r0, r2
 80064d4:	4798      	blx	r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80064da:	7bfb      	ldrb	r3, [r7, #15]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20012474 	.word	0x20012474

080064e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	4a0d      	ldr	r2, [pc, #52]	; (8006530 <disk_initialize+0x48>)
 80064fa:	5cd3      	ldrb	r3, [r2, r3]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d111      	bne.n	8006524 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <disk_initialize+0x48>)
 8006504:	2101      	movs	r1, #1
 8006506:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	4a09      	ldr	r2, [pc, #36]	; (8006530 <disk_initialize+0x48>)
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	4906      	ldr	r1, [pc, #24]	; (8006530 <disk_initialize+0x48>)
 8006518:	440a      	add	r2, r1
 800651a:	7a12      	ldrb	r2, [r2, #8]
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20012474 	.word	0x20012474

08006534 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <disk_read+0x3c>)
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	689c      	ldr	r4, [r3, #8]
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <disk_read+0x3c>)
 8006554:	4413      	add	r3, r2
 8006556:	7a18      	ldrb	r0, [r3, #8]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	47a0      	blx	r4
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]
  return res;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
}
 8006566:	4618      	mov	r0, r3
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd90      	pop	{r4, r7, pc}
 800656e:	bf00      	nop
 8006570:	20012474 	.word	0x20012474

08006574 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006574:	b590      	push	{r4, r7, lr}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	4a0a      	ldr	r2, [pc, #40]	; (80065b0 <disk_write+0x3c>)
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68dc      	ldr	r4, [r3, #12]
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <disk_write+0x3c>)
 8006594:	4413      	add	r3, r2
 8006596:	7a18      	ldrb	r0, [r3, #8]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	47a0      	blx	r4
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd90      	pop	{r4, r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20012474 	.word	0x20012474

080065b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	603a      	str	r2, [r7, #0]
 80065be:	71fb      	strb	r3, [r7, #7]
 80065c0:	460b      	mov	r3, r1
 80065c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	4a09      	ldr	r2, [pc, #36]	; (80065ec <disk_ioctl+0x38>)
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	79fa      	ldrb	r2, [r7, #7]
 80065d2:	4906      	ldr	r1, [pc, #24]	; (80065ec <disk_ioctl+0x38>)
 80065d4:	440a      	add	r2, r1
 80065d6:	7a10      	ldrb	r0, [r2, #8]
 80065d8:	79b9      	ldrb	r1, [r7, #6]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	4798      	blx	r3
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]
  return res;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20012474 	.word	0x20012474

080065f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3301      	adds	r3, #1
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006600:	89fb      	ldrh	r3, [r7, #14]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	b21a      	sxth	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b21b      	sxth	r3, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	b21b      	sxth	r3, r3
 8006610:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006612:	89fb      	ldrh	r3, [r7, #14]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3303      	adds	r3, #3
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	3202      	adds	r2, #2
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	3201      	adds	r2, #1
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
	return rv;
 8006658:	68fb      	ldr	r3, [r7, #12]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	887a      	ldrh	r2, [r7, #2]
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	0a1b      	lsrs	r3, r3, #8
 80066b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	1c53      	adds	r3, r2, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	6179      	str	r1, [r7, #20]
 800671a:	7812      	ldrb	r2, [r2, #0]
 800671c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3b01      	subs	r3, #1
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f1      	bne.n	800670e <mem_cpy+0x1a>
	}
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006736:	b480      	push	{r7}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	617a      	str	r2, [r7, #20]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3b01      	subs	r3, #1
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f3      	bne.n	8006746 <mem_set+0x10>
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	61ba      	str	r2, [r7, #24]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	1acb      	subs	r3, r1, r3
 8006798:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3b01      	subs	r3, #1
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <mem_cmp+0x40>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0eb      	beq.n	8006784 <mem_cmp+0x18>

	return r;
 80067ac:	697b      	ldr	r3, [r7, #20]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3724      	adds	r7, #36	; 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80067c4:	e002      	b.n	80067cc <chk_chr+0x12>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3301      	adds	r3, #1
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <chk_chr+0x26>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	4293      	cmp	r3, r2
 80067de:	d1f2      	bne.n	80067c6 <chk_chr+0xc>
	return *str;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	781b      	ldrb	r3, [r3, #0]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e029      	b.n	8006858 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <chk_lock+0xb4>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	4413      	add	r3, r2
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01d      	beq.n	800684e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006812:	4a24      	ldr	r2, [pc, #144]	; (80068a4 <chk_lock+0xb4>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	4413      	add	r3, r2
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d116      	bne.n	8006852 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <chk_lock+0xb4>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006834:	429a      	cmp	r2, r3
 8006836:	d10c      	bne.n	8006852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006838:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <chk_lock+0xb4>)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	4413      	add	r3, r2
 8006840:	3308      	adds	r3, #8
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006848:	429a      	cmp	r2, r3
 800684a:	d102      	bne.n	8006852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800684c:	e007      	b.n	800685e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800684e:	2301      	movs	r3, #1
 8006850:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d9d2      	bls.n	8006804 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d109      	bne.n	8006878 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <chk_lock+0x80>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d101      	bne.n	8006874 <chk_lock+0x84>
 8006870:	2300      	movs	r3, #0
 8006872:	e010      	b.n	8006896 <chk_lock+0xa6>
 8006874:	2312      	movs	r3, #18
 8006876:	e00e      	b.n	8006896 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d108      	bne.n	8006890 <chk_lock+0xa0>
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <chk_lock+0xb4>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4413      	add	r3, r2
 8006886:	330c      	adds	r3, #12
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688e:	d101      	bne.n	8006894 <chk_lock+0xa4>
 8006890:	2310      	movs	r3, #16
 8006892:	e000      	b.n	8006896 <chk_lock+0xa6>
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20012454 	.word	0x20012454

080068a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	e002      	b.n	80068ba <enq_lock+0x12>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3301      	adds	r3, #1
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d806      	bhi.n	80068ce <enq_lock+0x26>
 80068c0:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <enq_lock+0x40>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	4413      	add	r3, r2
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f2      	bne.n	80068b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20012454 	.word	0x20012454

080068ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e01f      	b.n	800693c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80068fc:	4a41      	ldr	r2, [pc, #260]	; (8006a04 <inc_lock+0x118>)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	4413      	add	r3, r2
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d113      	bne.n	8006936 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800690e:	4a3d      	ldr	r2, [pc, #244]	; (8006a04 <inc_lock+0x118>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4413      	add	r3, r2
 8006916:	3304      	adds	r3, #4
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800691e:	429a      	cmp	r2, r3
 8006920:	d109      	bne.n	8006936 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006922:	4a38      	ldr	r2, [pc, #224]	; (8006a04 <inc_lock+0x118>)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	4413      	add	r3, r2
 800692a:	3308      	adds	r3, #8
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006932:	429a      	cmp	r2, r3
 8006934:	d006      	beq.n	8006944 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d9dc      	bls.n	80068fc <inc_lock+0x10>
 8006942:	e000      	b.n	8006946 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006944:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d132      	bne.n	80069b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e002      	b.n	8006958 <inc_lock+0x6c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d806      	bhi.n	800696c <inc_lock+0x80>
 800695e:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <inc_lock+0x118>)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	4413      	add	r3, r2
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f2      	bne.n	8006952 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d101      	bne.n	8006976 <inc_lock+0x8a>
 8006972:	2300      	movs	r3, #0
 8006974:	e040      	b.n	80069f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4922      	ldr	r1, [pc, #136]	; (8006a04 <inc_lock+0x118>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	440b      	add	r3, r1
 8006982:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	491e      	ldr	r1, [pc, #120]	; (8006a04 <inc_lock+0x118>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	440b      	add	r3, r1
 8006990:	3304      	adds	r3, #4
 8006992:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	491a      	ldr	r1, [pc, #104]	; (8006a04 <inc_lock+0x118>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	440b      	add	r3, r1
 80069a0:	3308      	adds	r3, #8
 80069a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80069a4:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <inc_lock+0x118>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	4413      	add	r3, r2
 80069ac:	330c      	adds	r3, #12
 80069ae:	2200      	movs	r2, #0
 80069b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <inc_lock+0xe0>
 80069b8:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <inc_lock+0x118>)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	330c      	adds	r3, #12
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <inc_lock+0xe0>
 80069c8:	2300      	movs	r3, #0
 80069ca:	e015      	b.n	80069f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d108      	bne.n	80069e4 <inc_lock+0xf8>
 80069d2:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <inc_lock+0x118>)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	4413      	add	r3, r2
 80069da:	330c      	adds	r3, #12
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	e001      	b.n	80069e8 <inc_lock+0xfc>
 80069e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069e8:	4906      	ldr	r1, [pc, #24]	; (8006a04 <inc_lock+0x118>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	440b      	add	r3, r1
 80069f0:	330c      	adds	r3, #12
 80069f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3301      	adds	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20012454 	.word	0x20012454

08006a08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d825      	bhi.n	8006a68 <dec_lock+0x60>
		n = Files[i].ctr;
 8006a1c:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <dec_lock+0x74>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	4413      	add	r3, r2
 8006a24:	330c      	adds	r3, #12
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a2a:	89fb      	ldrh	r3, [r7, #14]
 8006a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a30:	d101      	bne.n	8006a36 <dec_lock+0x2e>
 8006a32:	2300      	movs	r3, #0
 8006a34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006a36:	89fb      	ldrh	r3, [r7, #14]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <dec_lock+0x3a>
 8006a3c:	89fb      	ldrh	r3, [r7, #14]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006a42:	4a0e      	ldr	r2, [pc, #56]	; (8006a7c <dec_lock+0x74>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	89fa      	ldrh	r2, [r7, #14]
 8006a4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <dec_lock+0x5a>
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <dec_lock+0x74>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	4413      	add	r3, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	737b      	strb	r3, [r7, #13]
 8006a66:	e001      	b.n	8006a6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006a68:	2302      	movs	r3, #2
 8006a6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20012454 	.word	0x20012454

08006a80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e010      	b.n	8006ab0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a8e:	4a0d      	ldr	r2, [pc, #52]	; (8006ac4 <clear_lock+0x44>)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	4413      	add	r3, r2
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d105      	bne.n	8006aaa <clear_lock+0x2a>
 8006a9e:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <clear_lock+0x44>)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	4413      	add	r3, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d9eb      	bls.n	8006a8e <clear_lock+0xe>
	}
}
 8006ab6:	bf00      	nop
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20012454 	.word	0x20012454

08006ac8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d034      	beq.n	8006b46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7858      	ldrb	r0, [r3, #1]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006aec:	2301      	movs	r3, #1
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	f7ff fd40 	bl	8006574 <disk_write>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	73fb      	strb	r3, [r7, #15]
 8006afe:	e022      	b.n	8006b46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d217      	bcs.n	8006b46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	e010      	b.n	8006b40 <sync_window+0x78>
					wsect += fs->fsize;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7858      	ldrb	r0, [r3, #1]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b32:	2301      	movs	r3, #1
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	f7ff fd1d 	bl	8006574 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d8eb      	bhi.n	8006b1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d01b      	beq.n	8006ba0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ffad 	bl	8006ac8 <sync_window>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d113      	bne.n	8006ba0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7858      	ldrb	r0, [r3, #1]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b82:	2301      	movs	r3, #1
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	f7ff fcd5 	bl	8006534 <disk_read>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b90:	f04f 33ff 	mov.w	r3, #4294967295
 8006b94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff87 	bl	8006ac8 <sync_window>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d159      	bne.n	8006c78 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d149      	bne.n	8006c60 <sync_fs+0xb4>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	791b      	ldrb	r3, [r3, #4]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d145      	bne.n	8006c60 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	899b      	ldrh	r3, [r3, #12]
 8006bde:	461a      	mov	r2, r3
 8006be0:	2100      	movs	r1, #0
 8006be2:	f7ff fda8 	bl	8006736 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3338      	adds	r3, #56	; 0x38
 8006bea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fd37 	bl	8006666 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3338      	adds	r3, #56	; 0x38
 8006bfc:	4921      	ldr	r1, [pc, #132]	; (8006c84 <sync_fs+0xd8>)
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fd4c 	bl	800669c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3338      	adds	r3, #56	; 0x38
 8006c08:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c0c:	491e      	ldr	r1, [pc, #120]	; (8006c88 <sync_fs+0xdc>)
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fd44 	bl	800669c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3338      	adds	r3, #56	; 0x38
 8006c18:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f7ff fd3a 	bl	800669c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3338      	adds	r3, #56	; 0x38
 8006c2c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7ff fd30 	bl	800669c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7858      	ldrb	r0, [r3, #1]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c54:	2301      	movs	r3, #1
 8006c56:	f7ff fc8d 	bl	8006574 <disk_write>
			fs->fsi_flag = 0;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2100      	movs	r1, #0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fca3 	bl	80065b4 <disk_ioctl>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <sync_fs+0xcc>
 8006c74:	2301      	movs	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	41615252 	.word	0x41615252
 8006c88:	61417272 	.word	0x61417272

08006c8c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	3b02      	subs	r3, #2
 8006c9a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	3b02      	subs	r3, #2
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d301      	bcc.n	8006cac <clust2sect+0x20>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e008      	b.n	8006cbe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	895b      	ldrh	r3, [r3, #10]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	fb03 f202 	mul.w	r2, r3, r2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	4413      	add	r3, r2
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d904      	bls.n	8006cea <get_fat+0x20>
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006cea:	2301      	movs	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e0bb      	b.n	8006e68 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	f000 8083 	beq.w	8006e06 <get_fat+0x13c>
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	f300 80a7 	bgt.w	8006e54 <get_fat+0x18a>
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d002      	beq.n	8006d10 <get_fat+0x46>
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d056      	beq.n	8006dbc <get_fat+0xf2>
 8006d0e:	e0a1      	b.n	8006e54 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	899b      	ldrh	r3, [r3, #12]
 8006d26:	4619      	mov	r1, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d2e:	4413      	add	r3, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	6938      	ldr	r0, [r7, #16]
 8006d34:	f7ff ff0c 	bl	8006b50 <move_window>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f040 808d 	bne.w	8006e5a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	60fa      	str	r2, [r7, #12]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	8992      	ldrh	r2, [r2, #12]
 8006d4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d4e:	fb01 f202 	mul.w	r2, r1, r2
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4413      	add	r3, r2
 8006d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	899b      	ldrh	r3, [r3, #12]
 8006d66:	4619      	mov	r1, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d6e:	4413      	add	r3, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	6938      	ldr	r0, [r7, #16]
 8006d74:	f7ff feec 	bl	8006b50 <move_window>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d16f      	bne.n	8006e5e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	461a      	mov	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d8a:	fb01 f202 	mul.w	r2, r1, r2
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <get_fat+0xe8>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	e002      	b.n	8006db8 <get_fat+0xee>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db8:	617b      	str	r3, [r7, #20]
			break;
 8006dba:	e055      	b.n	8006e68 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	899b      	ldrh	r3, [r3, #12]
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	4619      	mov	r1, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dd0:	4413      	add	r3, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6938      	ldr	r0, [r7, #16]
 8006dd6:	f7ff febb 	bl	8006b50 <move_window>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d140      	bne.n	8006e62 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	8992      	ldrh	r2, [r2, #12]
 8006dee:	fbb3 f0f2 	udiv	r0, r3, r2
 8006df2:	fb00 f202 	mul.w	r2, r0, r2
 8006df6:	1a9b      	subs	r3, r3, r2
 8006df8:	440b      	add	r3, r1
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fbf8 	bl	80065f0 <ld_word>
 8006e00:	4603      	mov	r3, r0
 8006e02:	617b      	str	r3, [r7, #20]
			break;
 8006e04:	e030      	b.n	8006e68 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	899b      	ldrh	r3, [r3, #12]
 8006e0e:	089b      	lsrs	r3, r3, #2
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	4619      	mov	r1, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f7ff fe96 	bl	8006b50 <move_window>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11d      	bne.n	8006e66 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	8992      	ldrh	r2, [r2, #12]
 8006e38:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e3c:	fb00 f202 	mul.w	r2, r0, r2
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	440b      	add	r3, r1
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff fbeb 	bl	8006620 <ld_dword>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e50:	617b      	str	r3, [r7, #20]
			break;
 8006e52:	e009      	b.n	8006e68 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e006      	b.n	8006e68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e5a:	bf00      	nop
 8006e5c:	e004      	b.n	8006e68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e5e:	bf00      	nop
 8006e60:	e002      	b.n	8006e68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e66:	bf00      	nop
		}
	}

	return val;
 8006e68:	697b      	ldr	r3, [r7, #20]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006e72:	b590      	push	{r4, r7, lr}
 8006e74:	b089      	sub	sp, #36	; 0x24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f240 8102 	bls.w	800708e <put_fat+0x21c>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	f080 80fc 	bcs.w	800708e <put_fat+0x21c>
		switch (fs->fs_type) {
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	f000 80b6 	beq.w	800700c <put_fat+0x19a>
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	f300 80fd 	bgt.w	80070a0 <put_fat+0x22e>
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d003      	beq.n	8006eb2 <put_fat+0x40>
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	f000 8083 	beq.w	8006fb6 <put_fat+0x144>
 8006eb0:	e0f6      	b.n	80070a0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	899b      	ldrh	r3, [r3, #12]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ed0:	4413      	add	r3, r2
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fe3b 	bl	8006b50 <move_window>
 8006eda:	4603      	mov	r3, r0
 8006edc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ede:	7ffb      	ldrb	r3, [r7, #31]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 80d6 	bne.w	8007092 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	61ba      	str	r2, [r7, #24]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	8992      	ldrh	r2, [r2, #12]
 8006ef6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006efa:	fb00 f202 	mul.w	r2, r0, r2
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	440b      	add	r3, r1
 8006f02:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00d      	beq.n	8006f2a <put_fat+0xb8>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	b25a      	sxtb	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	e001      	b.n	8006f2e <put_fat+0xbc>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	899b      	ldrh	r3, [r3, #12]
 8006f40:	4619      	mov	r1, r3
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f48:	4413      	add	r3, r2
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fdff 	bl	8006b50 <move_window>
 8006f52:	4603      	mov	r3, r0
 8006f54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f56:	7ffb      	ldrb	r3, [r7, #31]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f040 809c 	bne.w	8007096 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	899b      	ldrh	r3, [r3, #12]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f70:	fb00 f202 	mul.w	r2, r0, r2
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	440b      	add	r3, r1
 8006f78:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <put_fat+0x11a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	091b      	lsrs	r3, r3, #4
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e00e      	b.n	8006faa <put_fat+0x138>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	b25b      	sxtb	r3, r3
 8006f92:	f023 030f 	bic.w	r3, r3, #15
 8006f96:	b25a      	sxtb	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	b25b      	sxtb	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b25b      	sxtb	r3, r3
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	70da      	strb	r2, [r3, #3]
			break;
 8006fb4:	e074      	b.n	80070a0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	899b      	ldrh	r3, [r3, #12]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fca:	4413      	add	r3, r2
 8006fcc:	4619      	mov	r1, r3
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff fdbe 	bl	8006b50 <move_window>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fd8:	7ffb      	ldrb	r3, [r7, #31]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d15d      	bne.n	800709a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	8992      	ldrh	r2, [r2, #12]
 8006fec:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ff0:	fb00 f202 	mul.w	r2, r0, r2
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff fb31 	bl	8006666 <st_word>
			fs->wflag = 1;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	70da      	strb	r2, [r3, #3]
			break;
 800700a:	e049      	b.n	80070a0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	899b      	ldrh	r3, [r3, #12]
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	b29b      	uxth	r3, r3
 8007018:	4619      	mov	r1, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007020:	4413      	add	r3, r2
 8007022:	4619      	mov	r1, r3
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fd93 	bl	8006b50 <move_window>
 800702a:	4603      	mov	r3, r0
 800702c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800702e:	7ffb      	ldrb	r3, [r7, #31]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d134      	bne.n	800709e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	8992      	ldrh	r2, [r2, #12]
 8007048:	fbb3 f0f2 	udiv	r0, r3, r2
 800704c:	fb00 f202 	mul.w	r2, r0, r2
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	440b      	add	r3, r1
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fae3 	bl	8006620 <ld_dword>
 800705a:	4603      	mov	r3, r0
 800705c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007060:	4323      	orrs	r3, r4
 8007062:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	8992      	ldrh	r2, [r2, #12]
 8007072:	fbb3 f0f2 	udiv	r0, r3, r2
 8007076:	fb00 f202 	mul.w	r2, r0, r2
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	440b      	add	r3, r1
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff fb0b 	bl	800669c <st_dword>
			fs->wflag = 1;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	70da      	strb	r2, [r3, #3]
			break;
 800708c:	e008      	b.n	80070a0 <put_fat+0x22e>
		}
	}
 800708e:	bf00      	nop
 8007090:	e006      	b.n	80070a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007092:	bf00      	nop
 8007094:	e004      	b.n	80070a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007096:	bf00      	nop
 8007098:	e002      	b.n	80070a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800709e:	bf00      	nop
	return res;
 80070a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3724      	adds	r7, #36	; 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd90      	pop	{r4, r7, pc}

080070aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d904      	bls.n	80070d0 <remove_chain+0x26>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d301      	bcc.n	80070d4 <remove_chain+0x2a>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e04b      	b.n	800716c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80070da:	f04f 32ff 	mov.w	r2, #4294967295
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	69b8      	ldr	r0, [r7, #24]
 80070e2:	f7ff fec6 	bl	8006e72 <put_fat>
 80070e6:	4603      	mov	r3, r0
 80070e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80070ea:	7ffb      	ldrb	r3, [r7, #31]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <remove_chain+0x4a>
 80070f0:	7ffb      	ldrb	r3, [r7, #31]
 80070f2:	e03b      	b.n	800716c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff fde7 	bl	8006cca <get_fat>
 80070fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d031      	beq.n	8007168 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <remove_chain+0x64>
 800710a:	2302      	movs	r3, #2
 800710c:	e02e      	b.n	800716c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d101      	bne.n	800711a <remove_chain+0x70>
 8007116:	2301      	movs	r3, #1
 8007118:	e028      	b.n	800716c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800711a:	2200      	movs	r2, #0
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	69b8      	ldr	r0, [r7, #24]
 8007120:	f7ff fea7 	bl	8006e72 <put_fat>
 8007124:	4603      	mov	r3, r0
 8007126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007128:	7ffb      	ldrb	r3, [r7, #31]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <remove_chain+0x88>
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	e01c      	b.n	800716c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	3b02      	subs	r3, #2
 800713c:	429a      	cmp	r2, r3
 800713e:	d20b      	bcs.n	8007158 <remove_chain+0xae>
			fs->free_clst++;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	791b      	ldrb	r3, [r3, #4]
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d3c6      	bcc.n	80070f4 <remove_chain+0x4a>
 8007166:	e000      	b.n	800716a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007168:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10d      	bne.n	80071a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <create_chain+0x2c>
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	429a      	cmp	r2, r3
 800719e:	d31b      	bcc.n	80071d8 <create_chain+0x64>
 80071a0:	2301      	movs	r3, #1
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e018      	b.n	80071d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff fd8e 	bl	8006cca <get_fat>
 80071ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d801      	bhi.n	80071ba <create_chain+0x46>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e070      	b.n	800729c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d101      	bne.n	80071c6 <create_chain+0x52>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	e06a      	b.n	800729c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d201      	bcs.n	80071d4 <create_chain+0x60>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e063      	b.n	800729c <create_chain+0x128>
		scl = clst;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	3301      	adds	r3, #1
 80071e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d307      	bcc.n	80071fc <create_chain+0x88>
				ncl = 2;
 80071ec:	2302      	movs	r3, #2
 80071ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d901      	bls.n	80071fc <create_chain+0x88>
 80071f8:	2300      	movs	r3, #0
 80071fa:	e04f      	b.n	800729c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff fd63 	bl	8006cca <get_fat>
 8007204:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d003      	beq.n	800721a <create_chain+0xa6>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d101      	bne.n	800721e <create_chain+0xaa>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	e03e      	b.n	800729c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	429a      	cmp	r2, r3
 8007224:	d1da      	bne.n	80071dc <create_chain+0x68>
 8007226:	2300      	movs	r3, #0
 8007228:	e038      	b.n	800729c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800722a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800722c:	f04f 32ff 	mov.w	r2, #4294967295
 8007230:	69f9      	ldr	r1, [r7, #28]
 8007232:	6938      	ldr	r0, [r7, #16]
 8007234:	f7ff fe1d 	bl	8006e72 <put_fat>
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <create_chain+0xe2>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d006      	beq.n	8007256 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6938      	ldr	r0, [r7, #16]
 800724e:	f7ff fe10 	bl	8006e72 <put_fat>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d116      	bne.n	800728a <create_chain+0x116>
		fs->last_clst = ncl;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	3b02      	subs	r3, #2
 800726c:	429a      	cmp	r2, r3
 800726e:	d804      	bhi.n	800727a <create_chain+0x106>
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	1e5a      	subs	r2, r3, #1
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	711a      	strb	r2, [r3, #4]
 8007288:	e007      	b.n	800729a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d102      	bne.n	8007296 <create_chain+0x122>
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	e000      	b.n	8007298 <create_chain+0x124>
 8007296:	2301      	movs	r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800729a:	69fb      	ldr	r3, [r7, #28]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	3304      	adds	r3, #4
 80072ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	899b      	ldrh	r3, [r3, #12]
 80072c0:	461a      	mov	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	8952      	ldrh	r2, [r2, #10]
 80072cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1d1a      	adds	r2, r3, #4
 80072d6:	613a      	str	r2, [r7, #16]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <clmt_clust+0x42>
 80072e2:	2300      	movs	r3, #0
 80072e4:	e010      	b.n	8007308 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d307      	bcc.n	80072fe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3304      	adds	r3, #4
 80072fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072fc:	e7e9      	b.n	80072d2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80072fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	4413      	add	r3, r2
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800732a:	d204      	bcs.n	8007336 <dir_sdi+0x22>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007336:	2302      	movs	r3, #2
 8007338:	e071      	b.n	800741e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <dir_sdi+0x46>
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d902      	bls.n	800735a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	095b      	lsrs	r3, r3, #5
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	8912      	ldrh	r2, [r2, #8]
 8007368:	4293      	cmp	r3, r2
 800736a:	d301      	bcc.n	8007370 <dir_sdi+0x5c>
 800736c:	2302      	movs	r3, #2
 800736e:	e056      	b.n	800741e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	61da      	str	r2, [r3, #28]
 8007378:	e02d      	b.n	80073d6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	895b      	ldrh	r3, [r3, #10]
 800737e:	461a      	mov	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	899b      	ldrh	r3, [r3, #12]
 8007384:	fb02 f303 	mul.w	r3, r2, r3
 8007388:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800738a:	e019      	b.n	80073c0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fc9a 	bl	8006cca <get_fat>
 8007396:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d101      	bne.n	80073a4 <dir_sdi+0x90>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e03c      	b.n	800741e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d904      	bls.n	80073b4 <dir_sdi+0xa0>
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d301      	bcc.n	80073b8 <dir_sdi+0xa4>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e032      	b.n	800741e <dir_sdi+0x10a>
			ofs -= csz;
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d2e1      	bcs.n	800738c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80073c8:	6979      	ldr	r1, [r7, #20]
 80073ca:	6938      	ldr	r0, [r7, #16]
 80073cc:	f7ff fc5e 	bl	8006c8c <clust2sect>
 80073d0:	4602      	mov	r2, r0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <dir_sdi+0xd4>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e01a      	b.n	800741e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	899b      	ldrh	r3, [r3, #12]
 80073f0:	4619      	mov	r1, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073f8:	441a      	add	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	899b      	ldrh	r3, [r3, #12]
 8007408:	461a      	mov	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007410:	fb00 f202 	mul.w	r2, r0, r2
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	18ca      	adds	r2, r1, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	3320      	adds	r3, #32
 800743c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <dir_next+0x28>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744c:	d301      	bcc.n	8007452 <dir_next+0x2c>
 800744e:	2304      	movs	r3, #4
 8007450:	e0bb      	b.n	80075ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	899b      	ldrh	r3, [r3, #12]
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	fbb3 f1f2 	udiv	r1, r3, r2
 800745e:	fb01 f202 	mul.w	r2, r1, r2
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 809d 	bne.w	80075a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10b      	bne.n	8007494 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	8912      	ldrh	r2, [r2, #8]
 8007484:	4293      	cmp	r3, r2
 8007486:	f0c0 808d 	bcc.w	80075a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	61da      	str	r2, [r3, #28]
 8007490:	2304      	movs	r3, #4
 8007492:	e09a      	b.n	80075ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	899b      	ldrh	r3, [r3, #12]
 8007498:	461a      	mov	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	8952      	ldrh	r2, [r2, #10]
 80074a4:	3a01      	subs	r2, #1
 80074a6:	4013      	ands	r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d17b      	bne.n	80075a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7ff fc08 	bl	8006cca <get_fat>
 80074ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d801      	bhi.n	80074c6 <dir_next+0xa0>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e081      	b.n	80075ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d101      	bne.n	80074d2 <dir_next+0xac>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e07b      	b.n	80075ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d359      	bcc.n	8007590 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	61da      	str	r2, [r3, #28]
 80074e8:	2304      	movs	r3, #4
 80074ea:	e06e      	b.n	80075ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7ff fe3d 	bl	8007174 <create_chain>
 80074fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <dir_next+0xe0>
 8007502:	2307      	movs	r3, #7
 8007504:	e061      	b.n	80075ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <dir_next+0xea>
 800750c:	2302      	movs	r3, #2
 800750e:	e05c      	b.n	80075ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d101      	bne.n	800751c <dir_next+0xf6>
 8007518:	2301      	movs	r3, #1
 800751a:	e056      	b.n	80075ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7ff fad3 	bl	8006ac8 <sync_window>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <dir_next+0x106>
 8007528:	2301      	movs	r3, #1
 800752a:	e04e      	b.n	80075ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	899b      	ldrh	r3, [r3, #12]
 8007536:	461a      	mov	r2, r3
 8007538:	2100      	movs	r1, #0
 800753a:	f7ff f8fc 	bl	8006736 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff fba1 	bl	8006c8c <clust2sect>
 800754a:	4602      	mov	r2, r0
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	635a      	str	r2, [r3, #52]	; 0x34
 8007550:	e012      	b.n	8007578 <dir_next+0x152>
						fs->wflag = 1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff fab5 	bl	8006ac8 <sync_window>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <dir_next+0x142>
 8007564:	2301      	movs	r3, #1
 8007566:	e030      	b.n	80075ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3301      	adds	r3, #1
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	635a      	str	r2, [r3, #52]	; 0x34
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	895b      	ldrh	r3, [r3, #10]
 800757c:	461a      	mov	r2, r3
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4293      	cmp	r3, r2
 8007582:	d3e6      	bcc.n	8007552 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff fb77 	bl	8006c8c <clust2sect>
 800759e:	4602      	mov	r2, r0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	899b      	ldrh	r3, [r3, #12]
 80075b4:	461a      	mov	r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80075bc:	fb00 f202 	mul.w	r2, r0, r2
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	18ca      	adds	r2, r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b086      	sub	sp, #24
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80075e2:	2100      	movs	r1, #0
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fe95 	bl	8007314 <dir_sdi>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d12b      	bne.n	800764c <dir_alloc+0x7a>
		n = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	4619      	mov	r1, r3
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff faa6 	bl	8006b50 <move_window>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d11d      	bne.n	800764a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2be5      	cmp	r3, #229	; 0xe5
 8007616:	d004      	beq.n	8007622 <dir_alloc+0x50>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	3301      	adds	r3, #1
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d102      	bne.n	8007636 <dir_alloc+0x64>
 8007630:	e00c      	b.n	800764c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007636:	2101      	movs	r1, #1
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff fef4 	bl	8007426 <dir_next>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0d7      	beq.n	80075f8 <dir_alloc+0x26>
 8007648:	e000      	b.n	800764c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800764a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b04      	cmp	r3, #4
 8007650:	d101      	bne.n	8007656 <dir_alloc+0x84>
 8007652:	2307      	movs	r3, #7
 8007654:	75fb      	strb	r3, [r7, #23]
	return res;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	331a      	adds	r3, #26
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe ffbe 	bl	80065f0 <ld_word>
 8007674:	4603      	mov	r3, r0
 8007676:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d109      	bne.n	8007694 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	3314      	adds	r3, #20
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe ffb3 	bl	80065f0 <ld_word>
 800768a:	4603      	mov	r3, r0
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	331a      	adds	r3, #26
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	b292      	uxth	r2, r2
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe ffd6 	bl	8006666 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d109      	bne.n	80076d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f103 0214 	add.w	r2, r3, #20
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7fe ffc8 	bl	8006666 <st_word>
	}
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80076e0:	b590      	push	{r4, r7, lr}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	331a      	adds	r3, #26
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe ff7e 	bl	80065f0 <ld_word>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <cmp_lfn+0x1e>
 80076fa:	2300      	movs	r3, #0
 80076fc:	e059      	b.n	80077b2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007706:	1e5a      	subs	r2, r3, #1
 8007708:	4613      	mov	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007714:	2301      	movs	r3, #1
 8007716:	81fb      	strh	r3, [r7, #14]
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	e033      	b.n	8007786 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800771e:	4a27      	ldr	r2, [pc, #156]	; (80077bc <cmp_lfn+0xdc>)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4413      	add	r3, r2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	4413      	add	r3, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe ff5f 	bl	80065f0 <ld_word>
 8007732:	4603      	mov	r3, r0
 8007734:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01a      	beq.n	8007772 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2bfe      	cmp	r3, #254	; 0xfe
 8007740:	d812      	bhi.n	8007768 <cmp_lfn+0x88>
 8007742:	89bb      	ldrh	r3, [r7, #12]
 8007744:	4618      	mov	r0, r3
 8007746:	f002 fa7d 	bl	8009c44 <ff_wtoupper>
 800774a:	4603      	mov	r3, r0
 800774c:	461c      	mov	r4, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	617a      	str	r2, [r7, #20]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f002 fa71 	bl	8009c44 <ff_wtoupper>
 8007762:	4603      	mov	r3, r0
 8007764:	429c      	cmp	r4, r3
 8007766:	d001      	beq.n	800776c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007768:	2300      	movs	r3, #0
 800776a:	e022      	b.n	80077b2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800776c:	89bb      	ldrh	r3, [r7, #12]
 800776e:	81fb      	strh	r3, [r7, #14]
 8007770:	e006      	b.n	8007780 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007772:	89bb      	ldrh	r3, [r7, #12]
 8007774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007778:	4293      	cmp	r3, r2
 800777a:	d001      	beq.n	8007780 <cmp_lfn+0xa0>
 800777c:	2300      	movs	r3, #0
 800777e:	e018      	b.n	80077b2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3301      	adds	r3, #1
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b0c      	cmp	r3, #12
 800778a:	d9c8      	bls.n	800771e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <cmp_lfn+0xd0>
 8007798:	89fb      	ldrh	r3, [r7, #14]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d008      	beq.n	80077b0 <cmp_lfn+0xd0>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <cmp_lfn+0xd0>
 80077ac:	2300      	movs	r3, #0
 80077ae:	e000      	b.n	80077b2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80077b0:	2301      	movs	r3, #1
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd90      	pop	{r4, r7, pc}
 80077ba:	bf00      	nop
 80077bc:	08009f00 	.word	0x08009f00

080077c0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	331a      	adds	r3, #26
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe ff0e 	bl	80065f0 <ld_word>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <pick_lfn+0x1e>
 80077da:	2300      	movs	r3, #0
 80077dc:	e04d      	b.n	800787a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	1e5a      	subs	r2, r3, #1
 80077e8:	4613      	mov	r3, r2
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80077f4:	2301      	movs	r3, #1
 80077f6:	81fb      	strh	r3, [r7, #14]
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	e028      	b.n	8007850 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80077fe:	4a21      	ldr	r2, [pc, #132]	; (8007884 <pick_lfn+0xc4>)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	4413      	add	r3, r2
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	4413      	add	r3, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe feef 	bl	80065f0 <ld_word>
 8007812:	4603      	mov	r3, r0
 8007814:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007816:	89fb      	ldrh	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00f      	beq.n	800783c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2bfe      	cmp	r3, #254	; 0xfe
 8007820:	d901      	bls.n	8007826 <pick_lfn+0x66>
 8007822:	2300      	movs	r3, #0
 8007824:	e029      	b.n	800787a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007826:	89bb      	ldrh	r3, [r7, #12]
 8007828:	81fb      	strh	r3, [r7, #14]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	617a      	str	r2, [r7, #20]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	89fa      	ldrh	r2, [r7, #14]
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	e006      	b.n	800784a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800783c:	89bb      	ldrh	r3, [r7, #12]
 800783e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007842:	4293      	cmp	r3, r2
 8007844:	d001      	beq.n	800784a <pick_lfn+0x8a>
 8007846:	2300      	movs	r3, #0
 8007848:	e017      	b.n	800787a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3301      	adds	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b0c      	cmp	r3, #12
 8007854:	d9d3      	bls.n	80077fe <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2bfe      	cmp	r3, #254	; 0xfe
 8007866:	d901      	bls.n	800786c <pick_lfn+0xac>
 8007868:	2300      	movs	r3, #0
 800786a:	e006      	b.n	800787a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	2200      	movs	r2, #0
 8007876:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007878:	2301      	movs	r3, #1
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	08009f00 	.word	0x08009f00

08007888 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	460b      	mov	r3, r1
 8007898:	71fb      	strb	r3, [r7, #7]
 800789a:	4613      	mov	r3, r2
 800789c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	330d      	adds	r3, #13
 80078a2:	79ba      	ldrb	r2, [r7, #6]
 80078a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	330b      	adds	r3, #11
 80078aa:	220f      	movs	r2, #15
 80078ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	330c      	adds	r3, #12
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	331a      	adds	r3, #26
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fed2 	bl	8006666 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	82fb      	strh	r3, [r7, #22]
 80078d6:	2300      	movs	r3, #0
 80078d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80078da:	8afb      	ldrh	r3, [r7, #22]
 80078dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d007      	beq.n	80078f4 <put_lfn+0x6c>
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	61fa      	str	r2, [r7, #28]
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80078f4:	4a17      	ldr	r2, [pc, #92]	; (8007954 <put_lfn+0xcc>)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	4413      	add	r3, r2
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	8afa      	ldrh	r2, [r7, #22]
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fead 	bl	8006666 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800790c:	8afb      	ldrh	r3, [r7, #22]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <put_lfn+0x90>
 8007912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007916:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	3301      	adds	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b0c      	cmp	r3, #12
 8007922:	d9da      	bls.n	80078da <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007924:	8afb      	ldrh	r3, [r7, #22]
 8007926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800792a:	4293      	cmp	r3, r2
 800792c:	d006      	beq.n	800793c <put_lfn+0xb4>
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <put_lfn+0xbc>
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007942:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	79fa      	ldrb	r2, [r7, #7]
 8007948:	701a      	strb	r2, [r3, #0]
}
 800794a:	bf00      	nop
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	08009f00 	.word	0x08009f00

08007958 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08c      	sub	sp, #48	; 0x30
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007966:	220b      	movs	r2, #11
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7fe fec2 	bl	80066f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d92b      	bls.n	80079ce <gen_numname+0x76>
		sr = seq;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800797a:	e022      	b.n	80079c2 <gen_numname+0x6a>
			wc = *lfn++;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007986:	2300      	movs	r3, #0
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
 800798a:	e017      	b.n	80079bc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	005a      	lsls	r2, r3, #1
 8007990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	4413      	add	r3, r2
 8007998:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800799a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <gen_numname+0x5e>
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80079b0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80079b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	3301      	adds	r3, #1
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	d9e4      	bls.n	800798c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1d8      	bne.n	800797c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80079ce:	2307      	movs	r3, #7
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	3330      	adds	r3, #48	; 0x30
 80079de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80079e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079e6:	2b39      	cmp	r3, #57	; 0x39
 80079e8:	d904      	bls.n	80079f4 <gen_numname+0x9c>
 80079ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079ee:	3307      	adds	r3, #7
 80079f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	1e5a      	subs	r2, r3, #1
 80079f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80079fa:	3330      	adds	r3, #48	; 0x30
 80079fc:	443b      	add	r3, r7
 80079fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007a02:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1df      	bne.n	80079d2 <gen_numname+0x7a>
	ns[i] = '~';
 8007a12:	f107 0214 	add.w	r2, r7, #20
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	4413      	add	r3, r2
 8007a1a:	227e      	movs	r2, #126	; 0x7e
 8007a1c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
 8007a22:	e002      	b.n	8007a2a <gen_numname+0xd2>
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	3301      	adds	r3, #1
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d205      	bcs.n	8007a3e <gen_numname+0xe6>
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	4413      	add	r3, r2
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d1f2      	bne.n	8007a24 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	2b07      	cmp	r3, #7
 8007a42:	d807      	bhi.n	8007a54 <gen_numname+0xfc>
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a4a:	3330      	adds	r3, #48	; 0x30
 8007a4c:	443b      	add	r3, r7
 8007a4e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007a52:	e000      	b.n	8007a56 <gen_numname+0xfe>
 8007a54:	2120      	movs	r1, #32
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	460a      	mov	r2, r1
 8007a62:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	2b07      	cmp	r3, #7
 8007a68:	d9e9      	bls.n	8007a3e <gen_numname+0xe6>
}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	3730      	adds	r7, #48	; 0x30
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007a80:	230b      	movs	r3, #11
 8007a82:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	0852      	lsrs	r2, r2, #1
 8007a8a:	01db      	lsls	r3, r3, #7
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	1c59      	adds	r1, r3, #1
 8007a94:	6079      	str	r1, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4413      	add	r3, r2
 8007a9a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1ed      	bne.n	8007a84 <sum_sfn+0x10>
	return sum;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007aca:	23ff      	movs	r3, #255	; 0xff
 8007acc:	757b      	strb	r3, [r7, #21]
 8007ace:	23ff      	movs	r3, #255	; 0xff
 8007ad0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007ad2:	e081      	b.n	8007bd8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f7ff f838 	bl	8006b50 <move_window>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d17c      	bne.n	8007be4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007af2:	7dbb      	ldrb	r3, [r7, #22]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007af8:	2304      	movs	r3, #4
 8007afa:	75fb      	strb	r3, [r7, #23]
 8007afc:	e077      	b.n	8007bee <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	330b      	adds	r3, #11
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7bfa      	ldrb	r2, [r7, #15]
 8007b10:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007b12:	7dbb      	ldrb	r3, [r7, #22]
 8007b14:	2be5      	cmp	r3, #229	; 0xe5
 8007b16:	d00e      	beq.n	8007b36 <dir_read+0x80>
 8007b18:	7dbb      	ldrb	r3, [r7, #22]
 8007b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1c:	d00b      	beq.n	8007b36 <dir_read+0x80>
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	f023 0320 	bic.w	r3, r3, #32
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	bf0c      	ite	eq
 8007b28:	2301      	moveq	r3, #1
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d002      	beq.n	8007b3c <dir_read+0x86>
				ord = 0xFF;
 8007b36:	23ff      	movs	r3, #255	; 0xff
 8007b38:	757b      	strb	r3, [r7, #21]
 8007b3a:	e044      	b.n	8007bc6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d12f      	bne.n	8007ba2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007b42:	7dbb      	ldrb	r3, [r7, #22]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	7b5b      	ldrb	r3, [r3, #13]
 8007b52:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007b54:	7dbb      	ldrb	r3, [r7, #22]
 8007b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5a:	75bb      	strb	r3, [r7, #22]
 8007b5c:	7dbb      	ldrb	r3, [r7, #22]
 8007b5e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007b68:	7dba      	ldrb	r2, [r7, #22]
 8007b6a:	7d7b      	ldrb	r3, [r7, #21]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d115      	bne.n	8007b9c <dir_read+0xe6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	330d      	adds	r3, #13
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	7d3a      	ldrb	r2, [r7, #20]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d10e      	bne.n	8007b9c <dir_read+0xe6>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	691a      	ldr	r2, [r3, #16]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7ff fe19 	bl	80077c0 <pick_lfn>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <dir_read+0xe6>
 8007b94:	7d7b      	ldrb	r3, [r7, #21]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	e000      	b.n	8007b9e <dir_read+0xe8>
 8007b9c:	23ff      	movs	r3, #255	; 0xff
 8007b9e:	757b      	strb	r3, [r7, #21]
 8007ba0:	e011      	b.n	8007bc6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007ba2:	7d7b      	ldrb	r3, [r7, #21]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d109      	bne.n	8007bbc <dir_read+0x106>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff ff61 	bl	8007a74 <sum_sfn>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	7d3b      	ldrb	r3, [r7, #20]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d015      	beq.n	8007be8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8007bc4:	e010      	b.n	8007be8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fc2c 	bl	8007426 <dir_next>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <dir_read+0x136>
	while (dp->sect) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f47f af79 	bne.w	8007ad4 <dir_read+0x1e>
 8007be2:	e004      	b.n	8007bee <dir_read+0x138>
		if (res != FR_OK) break;
 8007be4:	bf00      	nop
 8007be6:	e002      	b.n	8007bee <dir_read+0x138>
					break;
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <dir_read+0x138>
		if (res != FR_OK) break;
 8007bec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <dir_read+0x144>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	61da      	str	r2, [r3, #28]
	return res;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007c12:	2100      	movs	r1, #0
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff fb7d 	bl	8007314 <dir_sdi>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <dir_find+0x24>
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	e0a9      	b.n	8007d7c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c28:	23ff      	movs	r3, #255	; 0xff
 8007c2a:	753b      	strb	r3, [r7, #20]
 8007c2c:	7d3b      	ldrb	r3, [r7, #20]
 8007c2e:	757b      	strb	r3, [r7, #21]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f04f 32ff 	mov.w	r2, #4294967295
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6938      	ldr	r0, [r7, #16]
 8007c40:	f7fe ff86 	bl	8006b50 <move_window>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 8090 	bne.w	8007d70 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c58:	7dbb      	ldrb	r3, [r7, #22]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <dir_find+0x60>
 8007c5e:	2304      	movs	r3, #4
 8007c60:	75fb      	strb	r3, [r7, #23]
 8007c62:	e08a      	b.n	8007d7a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	330b      	adds	r3, #11
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7bfa      	ldrb	r2, [r7, #15]
 8007c76:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007c78:	7dbb      	ldrb	r3, [r7, #22]
 8007c7a:	2be5      	cmp	r3, #229	; 0xe5
 8007c7c:	d007      	beq.n	8007c8e <dir_find+0x8a>
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <dir_find+0x98>
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b0f      	cmp	r3, #15
 8007c8c:	d006      	beq.n	8007c9c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c8e:	23ff      	movs	r3, #255	; 0xff
 8007c90:	757b      	strb	r3, [r7, #21]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30
 8007c9a:	e05e      	b.n	8007d5a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b0f      	cmp	r3, #15
 8007ca0:	d136      	bne.n	8007d10 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d154      	bne.n	8007d5a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00d      	beq.n	8007cd6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	7b5b      	ldrb	r3, [r3, #13]
 8007cc0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007cc2:	7dbb      	ldrb	r3, [r7, #22]
 8007cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc8:	75bb      	strb	r3, [r7, #22]
 8007cca:	7dbb      	ldrb	r3, [r7, #22]
 8007ccc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695a      	ldr	r2, [r3, #20]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007cd6:	7dba      	ldrb	r2, [r7, #22]
 8007cd8:	7d7b      	ldrb	r3, [r7, #21]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d115      	bne.n	8007d0a <dir_find+0x106>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	330d      	adds	r3, #13
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	7d3a      	ldrb	r2, [r7, #20]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d10e      	bne.n	8007d0a <dir_find+0x106>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7ff fcf2 	bl	80076e0 <cmp_lfn>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <dir_find+0x106>
 8007d02:	7d7b      	ldrb	r3, [r7, #21]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	e000      	b.n	8007d0c <dir_find+0x108>
 8007d0a:	23ff      	movs	r3, #255	; 0xff
 8007d0c:	757b      	strb	r3, [r7, #21]
 8007d0e:	e024      	b.n	8007d5a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007d10:	7d7b      	ldrb	r3, [r7, #21]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <dir_find+0x126>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff feaa 	bl	8007a74 <sum_sfn>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	7d3b      	ldrb	r3, [r7, #20]
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d024      	beq.n	8007d74 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <dir_find+0x14a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a18      	ldr	r0, [r3, #32]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3324      	adds	r3, #36	; 0x24
 8007d40:	220b      	movs	r2, #11
 8007d42:	4619      	mov	r1, r3
 8007d44:	f7fe fd12 	bl	800676c <mem_cmp>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d014      	beq.n	8007d78 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007d4e:	23ff      	movs	r3, #255	; 0xff
 8007d50:	757b      	strb	r3, [r7, #21]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff fb62 	bl	8007426 <dir_next>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f43f af65 	beq.w	8007c38 <dir_find+0x34>
 8007d6e:	e004      	b.n	8007d7a <dir_find+0x176>
		if (res != FR_OK) break;
 8007d70:	bf00      	nop
 8007d72:	e002      	b.n	8007d7a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007d78:	bf00      	nop

	return res;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08c      	sub	sp, #48	; 0x30
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d98:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <dir_register+0x20>
 8007da0:	2306      	movs	r3, #6
 8007da2:	e0e0      	b.n	8007f66 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007da4:	2300      	movs	r3, #0
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
 8007da8:	e002      	b.n	8007db0 <dir_register+0x2c>
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	3301      	adds	r3, #1
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f4      	bne.n	8007daa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007dc6:	f107 030c 	add.w	r3, r7, #12
 8007dca:	220c      	movs	r2, #12
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe fc91 	bl	80066f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d032      	beq.n	8007e42 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2240      	movs	r2, #64	; 0x40
 8007de0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007de4:	2301      	movs	r3, #1
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de8:	e016      	b.n	8007e18 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	f107 010c 	add.w	r1, r7, #12
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	f7ff fdad 	bl	8007958 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff ff00 	bl	8007c04 <dir_find>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	3301      	adds	r3, #1
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	2b63      	cmp	r3, #99	; 0x63
 8007e1c:	d9e5      	bls.n	8007dea <dir_register+0x66>
 8007e1e:	e000      	b.n	8007e22 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007e20:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2b64      	cmp	r3, #100	; 0x64
 8007e26:	d101      	bne.n	8007e2c <dir_register+0xa8>
 8007e28:	2307      	movs	r3, #7
 8007e2a:	e09c      	b.n	8007f66 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d002      	beq.n	8007e3a <dir_register+0xb6>
 8007e34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e38:	e095      	b.n	8007f66 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007e3a:	7dfa      	ldrb	r2, [r7, #23]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <dir_register+0xd8>
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	330c      	adds	r3, #12
 8007e50:	4a47      	ldr	r2, [pc, #284]	; (8007f70 <dir_register+0x1ec>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	089b      	lsrs	r3, r3, #2
 8007e58:	3301      	adds	r3, #1
 8007e5a:	e000      	b.n	8007e5e <dir_register+0xda>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007e60:	6a39      	ldr	r1, [r7, #32]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fbb5 	bl	80075d2 <dir_alloc>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d148      	bne.n	8007f08 <dir_register+0x184>
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d042      	beq.n	8007f08 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695a      	ldr	r2, [r3, #20]
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	015b      	lsls	r3, r3, #5
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff fa40 	bl	8007314 <dir_sdi>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d132      	bne.n	8007f08 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3324      	adds	r3, #36	; 0x24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff fde4 	bl	8007a74 <sum_sfn>
 8007eac:	4603      	mov	r3, r0
 8007eae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	69f8      	ldr	r0, [r7, #28]
 8007eb8:	f7fe fe4a 	bl	8006b50 <move_window>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d11d      	bne.n	8007f06 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	6918      	ldr	r0, [r3, #16]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a19      	ldr	r1, [r3, #32]
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	7efb      	ldrb	r3, [r7, #27]
 8007ed8:	f7ff fcd6 	bl	8007888 <put_lfn>
				fs->wflag = 1;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fa9e 	bl	8007426 <dir_next>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <dir_register+0x184>
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1d5      	bne.n	8007eb0 <dir_register+0x12c>
 8007f04:	e000      	b.n	8007f08 <dir_register+0x184>
				if (res != FR_OK) break;
 8007f06:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d128      	bne.n	8007f62 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	4619      	mov	r1, r3
 8007f16:	69f8      	ldr	r0, [r7, #28]
 8007f18:	f7fe fe1a 	bl	8006b50 <move_window>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d11b      	bne.n	8007f62 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fbff 	bl	8006736 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a18      	ldr	r0, [r3, #32]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3324      	adds	r3, #36	; 0x24
 8007f40:	220b      	movs	r2, #11
 8007f42:	4619      	mov	r1, r3
 8007f44:	f7fe fbd6 	bl	80066f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	330c      	adds	r3, #12
 8007f54:	f002 0218 	and.w	r2, r2, #24
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3730      	adds	r7, #48	; 0x30
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	4ec4ec4f 	.word	0x4ec4ec4f

08007f74 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2200      	movs	r2, #0
 8007f88:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80c9 	beq.w	8008126 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d032      	beq.n	8008004 <get_fileinfo+0x90>
			i = j = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007fa6:	e01b      	b.n	8007fe0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fe0d 	bl	8009bcc <ff_convert>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007fb6:	89fb      	ldrh	r3, [r7, #14]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <get_fileinfo+0x4e>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	e01a      	b.n	8007ff8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	2bfe      	cmp	r3, #254	; 0xfe
 8007fc6:	d902      	bls.n	8007fce <get_fileinfo+0x5a>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e014      	b.n	8007ff8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	61fa      	str	r2, [r7, #28]
 8007fd4:	89fa      	ldrh	r2, [r7, #14]
 8007fd6:	b2d1      	uxtb	r1, r2
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	4413      	add	r3, r2
 8007fdc:	460a      	mov	r2, r1
 8007fde:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	1c59      	adds	r1, r3, #1
 8007fe8:	61b9      	str	r1, [r7, #24]
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	81fb      	strh	r3, [r7, #14]
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1d7      	bne.n	8007fa8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3316      	adds	r3, #22
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	3316      	adds	r3, #22
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008018:	e04c      	b.n	80080b4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1a      	ldr	r2, [r3, #32]
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	1c59      	adds	r1, r3, #1
 8008022:	61f9      	str	r1, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2b20      	cmp	r3, #32
 800802e:	d100      	bne.n	8008032 <get_fileinfo+0xbe>
 8008030:	e040      	b.n	80080b4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b05      	cmp	r3, #5
 8008036:	d101      	bne.n	800803c <get_fileinfo+0xc8>
 8008038:	23e5      	movs	r3, #229	; 0xe5
 800803a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b09      	cmp	r3, #9
 8008040:	d10f      	bne.n	8008062 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8008042:	89bb      	ldrh	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d105      	bne.n	8008054 <get_fileinfo+0xe0>
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	4413      	add	r3, r2
 800804e:	3316      	adds	r3, #22
 8008050:	222e      	movs	r2, #46	; 0x2e
 8008052:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	61ba      	str	r2, [r7, #24]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4413      	add	r3, r2
 800805e:	222e      	movs	r2, #46	; 0x2e
 8008060:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	4413      	add	r3, r2
 8008068:	3309      	adds	r3, #9
 800806a:	7dfa      	ldrb	r2, [r7, #23]
 800806c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800806e:	89bb      	ldrh	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11c      	bne.n	80080ae <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d913      	bls.n	80080a2 <get_fileinfo+0x12e>
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b5a      	cmp	r3, #90	; 0x5a
 800807e:	d810      	bhi.n	80080a2 <get_fileinfo+0x12e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	330c      	adds	r3, #12
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b08      	cmp	r3, #8
 800808e:	d901      	bls.n	8008094 <get_fileinfo+0x120>
 8008090:	2310      	movs	r3, #16
 8008092:	e000      	b.n	8008096 <get_fileinfo+0x122>
 8008094:	2308      	movs	r3, #8
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	3320      	adds	r3, #32
 80080a0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	3316      	adds	r3, #22
 80080aa:	7dfa      	ldrb	r2, [r7, #23]
 80080ac:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	3301      	adds	r3, #1
 80080b2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b0a      	cmp	r3, #10
 80080b8:	d9af      	bls.n	800801a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80080ba:	89bb      	ldrh	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10d      	bne.n	80080dc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	4413      	add	r3, r2
 80080c6:	3316      	adds	r3, #22
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	330c      	adds	r3, #12
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <get_fileinfo+0x168>
 80080d8:	2300      	movs	r3, #0
 80080da:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	4413      	add	r3, r2
 80080e2:	3309      	adds	r3, #9
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	7ada      	ldrb	r2, [r3, #11]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	331c      	adds	r3, #28
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fa91 	bl	8006620 <ld_dword>
 80080fe:	4602      	mov	r2, r0
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	3316      	adds	r3, #22
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fa88 	bl	8006620 <ld_dword>
 8008110:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	b29a      	uxth	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	80da      	strh	r2, [r3, #6]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	b29a      	uxth	r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	809a      	strh	r2, [r3, #4]
 8008124:	e000      	b.n	8008128 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008126:	bf00      	nop
}
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	1c59      	adds	r1, r3, #1
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	2b60      	cmp	r3, #96	; 0x60
 800814a:	d905      	bls.n	8008158 <get_achar+0x28>
 800814c:	89fb      	ldrh	r3, [r7, #14]
 800814e:	2b7a      	cmp	r3, #122	; 0x7a
 8008150:	d802      	bhi.n	8008158 <get_achar+0x28>
 8008152:	89fb      	ldrh	r3, [r7, #14]
 8008154:	3b20      	subs	r3, #32
 8008156:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8008158:	89fb      	ldrh	r3, [r7, #14]
 800815a:	2b7f      	cmp	r3, #127	; 0x7f
 800815c:	d904      	bls.n	8008168 <get_achar+0x38>
 800815e:	89fb      	ldrh	r3, [r7, #14]
 8008160:	3b80      	subs	r3, #128	; 0x80
 8008162:	4a05      	ldr	r2, [pc, #20]	; (8008178 <get_achar+0x48>)
 8008164:	5cd3      	ldrb	r3, [r2, r3]
 8008166:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8008168:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	08009e80 	.word	0x08009e80

0800817c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	; 0x28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800818a:	e009      	b.n	80081a0 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff ffcd 	bl	8008130 <get_achar>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <pattern_matching+0x24>
 800819c:	2300      	movs	r3, #0
 800819e:	e064      	b.n	800826a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	1e5a      	subs	r2, r3, #1
 80081a4:	607a      	str	r2, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <pattern_matching+0x40>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <pattern_matching+0x40>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e056      	b.n	800826a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b3f      	cmp	r3, #63	; 0x3f
 80081ca:	d003      	beq.n	80081d4 <pattern_matching+0x58>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b2a      	cmp	r3, #42	; 0x2a
 80081d2:	d126      	bne.n	8008222 <pattern_matching+0xa6>
				nm = nx = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61fb      	str	r3, [r7, #28]
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	617a      	str	r2, [r7, #20]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b3f      	cmp	r3, #63	; 0x3f
 80081e6:	d103      	bne.n	80081f0 <pattern_matching+0x74>
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	3301      	adds	r3, #1
 80081ec:	623b      	str	r3, [r7, #32]
 80081ee:	e001      	b.n	80081f4 <pattern_matching+0x78>
 80081f0:	2301      	movs	r3, #1
 80081f2:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b3f      	cmp	r3, #63	; 0x3f
 80081fa:	d0ef      	beq.n	80081dc <pattern_matching+0x60>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b2a      	cmp	r3, #42	; 0x2a
 8008202:	d0eb      	beq.n	80081dc <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8008204:	6978      	ldr	r0, [r7, #20]
 8008206:	6939      	ldr	r1, [r7, #16]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	6a3a      	ldr	r2, [r7, #32]
 800820c:	f7ff ffb6 	bl	800817c <pattern_matching>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <pattern_matching+0x9e>
 8008216:	2301      	movs	r3, #1
 8008218:	e027      	b.n	800826a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008220:	e017      	b.n	8008252 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8008222:	f107 0314 	add.w	r3, r7, #20
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff ff82 	bl	8008130 <get_achar>
 800822c:	4603      	mov	r3, r0
 800822e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8008230:	f107 0310 	add.w	r3, r7, #16
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff ff7b 	bl	8008130 <get_achar>
 800823a:	4603      	mov	r3, r0
 800823c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800823e:	8b7a      	ldrh	r2, [r7, #26]
 8008240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008242:	429a      	cmp	r2, r3
 8008244:	d104      	bne.n	8008250 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8008246:	8b7b      	ldrh	r3, [r7, #26]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1bb      	bne.n	80081c4 <pattern_matching+0x48>
 800824c:	2301      	movs	r3, #1
 800824e:	e00c      	b.n	800826a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8008250:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8008252:	f107 0308 	add.w	r3, r7, #8
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ff6a 	bl	8008130 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <pattern_matching+0xec>
 8008262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1a9      	bne.n	80081bc <pattern_matching+0x40>

	return 0;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3728      	adds	r7, #40	; 0x28
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	61ba      	str	r2, [r7, #24]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4413      	add	r3, r2
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80082a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082a4:	2b1f      	cmp	r3, #31
 80082a6:	d940      	bls.n	800832a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80082a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082aa:	2b2f      	cmp	r3, #47	; 0x2f
 80082ac:	d006      	beq.n	80082bc <create_name+0x48>
 80082ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082b0:	2b5c      	cmp	r3, #92	; 0x5c
 80082b2:	d110      	bne.n	80082d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80082b4:	e002      	b.n	80082bc <create_name+0x48>
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	3301      	adds	r3, #1
 80082ba:	61bb      	str	r3, [r7, #24]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b2f      	cmp	r3, #47	; 0x2f
 80082c6:	d0f6      	beq.n	80082b6 <create_name+0x42>
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	4413      	add	r3, r2
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b5c      	cmp	r3, #92	; 0x5c
 80082d2:	d0f0      	beq.n	80082b6 <create_name+0x42>
			break;
 80082d4:	e02a      	b.n	800832c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2bfe      	cmp	r3, #254	; 0xfe
 80082da:	d901      	bls.n	80082e0 <create_name+0x6c>
 80082dc:	2306      	movs	r3, #6
 80082de:	e17d      	b.n	80085dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80082e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80082e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082e8:	2101      	movs	r1, #1
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fc6e 	bl	8009bcc <ff_convert>
 80082f0:	4603      	mov	r3, r0
 80082f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80082f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <create_name+0x8a>
 80082fa:	2306      	movs	r3, #6
 80082fc:	e16e      	b.n	80085dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80082fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008300:	2b7f      	cmp	r3, #127	; 0x7f
 8008302:	d809      	bhi.n	8008318 <create_name+0xa4>
 8008304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008306:	4619      	mov	r1, r3
 8008308:	488d      	ldr	r0, [pc, #564]	; (8008540 <create_name+0x2cc>)
 800830a:	f7fe fa56 	bl	80067ba <chk_chr>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <create_name+0xa4>
 8008314:	2306      	movs	r3, #6
 8008316:	e161      	b.n	80085dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	617a      	str	r2, [r7, #20]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008326:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008328:	e7b4      	b.n	8008294 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800832a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	441a      	add	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008338:	2b1f      	cmp	r3, #31
 800833a:	d801      	bhi.n	8008340 <create_name+0xcc>
 800833c:	2304      	movs	r3, #4
 800833e:	e000      	b.n	8008342 <create_name+0xce>
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008346:	e011      	b.n	800836c <create_name+0xf8>
		w = lfn[di - 1];
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800834e:	3b01      	subs	r3, #1
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800835a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800835c:	2b20      	cmp	r3, #32
 800835e:	d002      	beq.n	8008366 <create_name+0xf2>
 8008360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008362:	2b2e      	cmp	r3, #46	; 0x2e
 8008364:	d106      	bne.n	8008374 <create_name+0x100>
		di--;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	3b01      	subs	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1ea      	bne.n	8008348 <create_name+0xd4>
 8008372:	e000      	b.n	8008376 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008374:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	2200      	movs	r2, #0
 8008380:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <create_name+0x118>
 8008388:	2306      	movs	r3, #6
 800838a:	e127      	b.n	80085dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3324      	adds	r3, #36	; 0x24
 8008390:	220b      	movs	r2, #11
 8008392:	2120      	movs	r1, #32
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe f9ce 	bl	8006736 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800839a:	2300      	movs	r3, #0
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	e002      	b.n	80083a6 <create_name+0x132>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	d0f5      	beq.n	80083a0 <create_name+0x12c>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	2b2e      	cmp	r3, #46	; 0x2e
 80083c0:	d0ee      	beq.n	80083a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d009      	beq.n	80083dc <create_name+0x168>
 80083c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083cc:	f043 0303 	orr.w	r3, r3, #3
 80083d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80083d4:	e002      	b.n	80083dc <create_name+0x168>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	3b01      	subs	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <create_name+0x182>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083e8:	3b01      	subs	r3, #1
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	2b2e      	cmp	r3, #46	; 0x2e
 80083f4:	d1ef      	bne.n	80083d6 <create_name+0x162>

	i = b = 0; ni = 8;
 80083f6:	2300      	movs	r3, #0
 80083f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80083fc:	2300      	movs	r3, #0
 80083fe:	623b      	str	r3, [r7, #32]
 8008400:	2308      	movs	r3, #8
 8008402:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	61ba      	str	r2, [r7, #24]
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 8090 	beq.w	800853c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800841c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800841e:	2b20      	cmp	r3, #32
 8008420:	d006      	beq.n	8008430 <create_name+0x1bc>
 8008422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008424:	2b2e      	cmp	r3, #46	; 0x2e
 8008426:	d10a      	bne.n	800843e <create_name+0x1ca>
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	429a      	cmp	r2, r3
 800842e:	d006      	beq.n	800843e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008434:	f043 0303 	orr.w	r3, r3, #3
 8008438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800843c:	e07d      	b.n	800853a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800843e:	6a3a      	ldr	r2, [r7, #32]
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	429a      	cmp	r2, r3
 8008444:	d203      	bcs.n	800844e <create_name+0x1da>
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	429a      	cmp	r2, r3
 800844c:	d123      	bne.n	8008496 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	2b0b      	cmp	r3, #11
 8008452:	d106      	bne.n	8008462 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008458:	f043 0303 	orr.w	r3, r3, #3
 800845c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008460:	e075      	b.n	800854e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	429a      	cmp	r2, r3
 8008468:	d005      	beq.n	8008476 <create_name+0x202>
 800846a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800846e:	f043 0303 	orr.w	r3, r3, #3
 8008472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	429a      	cmp	r2, r3
 800847c:	d866      	bhi.n	800854c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	2308      	movs	r3, #8
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	230b      	movs	r3, #11
 8008488:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800848a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008494:	e051      	b.n	800853a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008498:	2b7f      	cmp	r3, #127	; 0x7f
 800849a:	d914      	bls.n	80084c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800849c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800849e:	2100      	movs	r1, #0
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fb93 	bl	8009bcc <ff_convert>
 80084a6:	4603      	mov	r3, r0
 80084a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80084aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <create_name+0x246>
 80084b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084b2:	3b80      	subs	r3, #128	; 0x80
 80084b4:	4a23      	ldr	r2, [pc, #140]	; (8008544 <create_name+0x2d0>)
 80084b6:	5cd3      	ldrb	r3, [r2, r3]
 80084b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80084ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084be:	f043 0302 	orr.w	r3, r3, #2
 80084c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80084c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <create_name+0x268>
 80084cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ce:	4619      	mov	r1, r3
 80084d0:	481d      	ldr	r0, [pc, #116]	; (8008548 <create_name+0x2d4>)
 80084d2:	f7fe f972 	bl	80067ba <chk_chr>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80084dc:	235f      	movs	r3, #95	; 0x5f
 80084de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80084e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084e4:	f043 0303 	orr.w	r3, r3, #3
 80084e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084ec:	e01b      	b.n	8008526 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80084ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d909      	bls.n	8008508 <create_name+0x294>
 80084f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084f6:	2b5a      	cmp	r3, #90	; 0x5a
 80084f8:	d806      	bhi.n	8008508 <create_name+0x294>
					b |= 2;
 80084fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80084fe:	f043 0302 	orr.w	r3, r3, #2
 8008502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008506:	e00e      	b.n	8008526 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800850a:	2b60      	cmp	r3, #96	; 0x60
 800850c:	d90b      	bls.n	8008526 <create_name+0x2b2>
 800850e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008510:	2b7a      	cmp	r3, #122	; 0x7a
 8008512:	d808      	bhi.n	8008526 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008522:	3b20      	subs	r3, #32
 8008524:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	623a      	str	r2, [r7, #32]
 800852c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800852e:	b2d1      	uxtb	r1, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	4413      	add	r3, r2
 8008534:	460a      	mov	r2, r1
 8008536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800853a:	e763      	b.n	8008404 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800853c:	bf00      	nop
 800853e:	e006      	b.n	800854e <create_name+0x2da>
 8008540:	08009df4 	.word	0x08009df4
 8008544:	08009e80 	.word	0x08009e80
 8008548:	08009e00 	.word	0x08009e00
			if (si > di) break;			/* No extension */
 800854c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008554:	2be5      	cmp	r3, #229	; 0xe5
 8008556:	d103      	bne.n	8008560 <create_name+0x2ec>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2205      	movs	r2, #5
 800855c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	2b08      	cmp	r3, #8
 8008564:	d104      	bne.n	8008570 <create_name+0x2fc>
 8008566:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008574:	f003 030c 	and.w	r3, r3, #12
 8008578:	2b0c      	cmp	r3, #12
 800857a:	d005      	beq.n	8008588 <create_name+0x314>
 800857c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	2b03      	cmp	r3, #3
 8008586:	d105      	bne.n	8008594 <create_name+0x320>
 8008588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d117      	bne.n	80085d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80085a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d105      	bne.n	80085b8 <create_name+0x344>
 80085ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b0:	f043 0310 	orr.w	r3, r3, #16
 80085b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80085b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085bc:	f003 030c 	and.w	r3, r3, #12
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d105      	bne.n	80085d0 <create_name+0x35c>
 80085c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c8:	f043 0308 	orr.w	r3, r3, #8
 80085cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80085d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80085da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3728      	adds	r7, #40	; 0x28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80085f8:	e002      	b.n	8008600 <follow_path+0x1c>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	3301      	adds	r3, #1
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b2f      	cmp	r3, #47	; 0x2f
 8008606:	d0f8      	beq.n	80085fa <follow_path+0x16>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b5c      	cmp	r3, #92	; 0x5c
 800860e:	d0f4      	beq.n	80085fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2200      	movs	r2, #0
 8008614:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b1f      	cmp	r3, #31
 800861c:	d80a      	bhi.n	8008634 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2280      	movs	r2, #128	; 0x80
 8008622:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008626:	2100      	movs	r1, #0
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7fe fe73 	bl	8007314 <dir_sdi>
 800862e:	4603      	mov	r3, r0
 8008630:	75fb      	strb	r3, [r7, #23]
 8008632:	e048      	b.n	80086c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008634:	463b      	mov	r3, r7
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff fe1b 	bl	8008274 <create_name>
 800863e:	4603      	mov	r3, r0
 8008640:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d139      	bne.n	80086bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff fadb 	bl	8007c04 <dir_find>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008658:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00a      	beq.n	8008676 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b04      	cmp	r3, #4
 8008664:	d12c      	bne.n	80086c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d127      	bne.n	80086c0 <follow_path+0xdc>
 8008670:	2305      	movs	r3, #5
 8008672:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008674:	e024      	b.n	80086c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d121      	bne.n	80086c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	799b      	ldrb	r3, [r3, #6]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800868c:	2305      	movs	r3, #5
 800868e:	75fb      	strb	r3, [r7, #23]
 8008690:	e019      	b.n	80086c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	8992      	ldrh	r2, [r2, #12]
 80086a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80086a4:	fb00 f202 	mul.w	r2, r0, r2
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	440b      	add	r3, r1
 80086ac:	4619      	mov	r1, r3
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7fe ffd6 	bl	8007660 <ld_clust>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086ba:	e7bb      	b.n	8008634 <follow_path+0x50>
			if (res != FR_OK) break;
 80086bc:	bf00      	nop
 80086be:	e002      	b.n	80086c6 <follow_path+0xe2>
				break;
 80086c0:	bf00      	nop
 80086c2:	e000      	b.n	80086c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80086c4:	bf00      	nop
			}
		}
	}

	return res;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80086d8:	f04f 33ff 	mov.w	r3, #4294967295
 80086dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d031      	beq.n	800874a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e002      	b.n	80086f4 <get_ldnumber+0x24>
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3301      	adds	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b1f      	cmp	r3, #31
 80086fa:	d903      	bls.n	8008704 <get_ldnumber+0x34>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b3a      	cmp	r3, #58	; 0x3a
 8008702:	d1f4      	bne.n	80086ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b3a      	cmp	r3, #58	; 0x3a
 800870a:	d11c      	bne.n	8008746 <get_ldnumber+0x76>
			tp = *path;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	60fa      	str	r2, [r7, #12]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	3b30      	subs	r3, #48	; 0x30
 800871c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b09      	cmp	r3, #9
 8008722:	d80e      	bhi.n	8008742 <get_ldnumber+0x72>
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	429a      	cmp	r2, r3
 800872a:	d10a      	bne.n	8008742 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d107      	bne.n	8008742 <get_ldnumber+0x72>
					vol = (int)i;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	3301      	adds	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	e002      	b.n	800874c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800874a:	693b      	ldr	r3, [r7, #16]
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	70da      	strb	r2, [r3, #3]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f04f 32ff 	mov.w	r2, #4294967295
 800876e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fe f9ec 	bl	8006b50 <move_window>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <check_fs+0x2a>
 800877e:	2304      	movs	r3, #4
 8008780:	e038      	b.n	80087f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3338      	adds	r3, #56	; 0x38
 8008786:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd ff30 	bl	80065f0 <ld_word>
 8008790:	4603      	mov	r3, r0
 8008792:	461a      	mov	r2, r3
 8008794:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008798:	429a      	cmp	r2, r3
 800879a:	d001      	beq.n	80087a0 <check_fs+0x48>
 800879c:	2303      	movs	r3, #3
 800879e:	e029      	b.n	80087f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087a6:	2be9      	cmp	r3, #233	; 0xe9
 80087a8:	d009      	beq.n	80087be <check_fs+0x66>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087b0:	2beb      	cmp	r3, #235	; 0xeb
 80087b2:	d11e      	bne.n	80087f2 <check_fs+0x9a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80087ba:	2b90      	cmp	r3, #144	; 0x90
 80087bc:	d119      	bne.n	80087f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3338      	adds	r3, #56	; 0x38
 80087c2:	3336      	adds	r3, #54	; 0x36
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fd ff2b 	bl	8006620 <ld_dword>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087d0:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <check_fs+0xa4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d101      	bne.n	80087da <check_fs+0x82>
 80087d6:	2300      	movs	r3, #0
 80087d8:	e00c      	b.n	80087f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3338      	adds	r3, #56	; 0x38
 80087de:	3352      	adds	r3, #82	; 0x52
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd ff1d 	bl	8006620 <ld_dword>
 80087e6:	4603      	mov	r3, r0
 80087e8:	4a05      	ldr	r2, [pc, #20]	; (8008800 <check_fs+0xa8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d101      	bne.n	80087f2 <check_fs+0x9a>
 80087ee:	2300      	movs	r3, #0
 80087f0:	e000      	b.n	80087f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80087f2:	2302      	movs	r3, #2
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	00544146 	.word	0x00544146
 8008800:	33544146 	.word	0x33544146

08008804 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b096      	sub	sp, #88	; 0x58
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7ff ff59 	bl	80086d0 <get_ldnumber>
 800881e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	da01      	bge.n	800882a <find_volume+0x26>
 8008826:	230b      	movs	r3, #11
 8008828:	e262      	b.n	8008cf0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800882a:	4a9f      	ldr	r2, [pc, #636]	; (8008aa8 <find_volume+0x2a4>)
 800882c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008832:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <find_volume+0x3a>
 800883a:	230c      	movs	r3, #12
 800883c:	e258      	b.n	8008cf0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008842:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01a      	beq.n	800888a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	4618      	mov	r0, r3
 800885a:	f7fd fe2b 	bl	80064b4 <disk_status>
 800885e:	4603      	mov	r3, r0
 8008860:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008864:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10c      	bne.n	800888a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <find_volume+0x82>
 8008876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008882:	230a      	movs	r3, #10
 8008884:	e234      	b.n	8008cf0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008886:	2300      	movs	r3, #0
 8008888:	e232      	b.n	8008cf0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008892:	b2da      	uxtb	r2, r3
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	785b      	ldrb	r3, [r3, #1]
 800889c:	4618      	mov	r0, r3
 800889e:	f7fd fe23 	bl	80064e8 <disk_initialize>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80088a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80088b4:	2303      	movs	r3, #3
 80088b6:	e21b      	b.n	8008cf0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <find_volume+0xca>
 80088be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80088ca:	230a      	movs	r3, #10
 80088cc:	e210      	b.n	8008cf0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	7858      	ldrb	r0, [r3, #1]
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	330c      	adds	r3, #12
 80088d6:	461a      	mov	r2, r3
 80088d8:	2102      	movs	r1, #2
 80088da:	f7fd fe6b 	bl	80065b4 <disk_ioctl>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <find_volume+0xe4>
 80088e4:	2301      	movs	r3, #1
 80088e6:	e203      	b.n	8008cf0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	899b      	ldrh	r3, [r3, #12]
 80088ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f0:	d80d      	bhi.n	800890e <find_volume+0x10a>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	899b      	ldrh	r3, [r3, #12]
 80088f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fa:	d308      	bcc.n	800890e <find_volume+0x10a>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	899b      	ldrh	r3, [r3, #12]
 8008900:	461a      	mov	r2, r3
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	899b      	ldrh	r3, [r3, #12]
 8008906:	3b01      	subs	r3, #1
 8008908:	4013      	ands	r3, r2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <find_volume+0x10e>
 800890e:	2301      	movs	r3, #1
 8008910:	e1ee      	b.n	8008cf0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800891a:	f7ff ff1d 	bl	8008758 <check_fs>
 800891e:	4603      	mov	r3, r0
 8008920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008928:	2b02      	cmp	r3, #2
 800892a:	d149      	bne.n	80089c0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800892c:	2300      	movs	r3, #0
 800892e:	643b      	str	r3, [r7, #64]	; 0x40
 8008930:	e01e      	b.n	8008970 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008940:	4413      	add	r3, r2
 8008942:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	3304      	adds	r3, #4
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d006      	beq.n	800895c <find_volume+0x158>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	3308      	adds	r3, #8
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fe64 	bl	8006620 <ld_dword>
 8008958:	4602      	mov	r2, r0
 800895a:	e000      	b.n	800895e <find_volume+0x15a>
 800895c:	2200      	movs	r2, #0
 800895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	3358      	adds	r3, #88	; 0x58
 8008964:	443b      	add	r3, r7
 8008966:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800896a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896c:	3301      	adds	r3, #1
 800896e:	643b      	str	r3, [r7, #64]	; 0x40
 8008970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008972:	2b03      	cmp	r3, #3
 8008974:	d9dd      	bls.n	8008932 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008976:	2300      	movs	r3, #0
 8008978:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800897a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <find_volume+0x182>
 8008980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008982:	3b01      	subs	r3, #1
 8008984:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	3358      	adds	r3, #88	; 0x58
 800898c:	443b      	add	r3, r7
 800898e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008992:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <find_volume+0x1a2>
 800899a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800899c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800899e:	f7ff fedb 	bl	8008758 <check_fs>
 80089a2:	4603      	mov	r3, r0
 80089a4:	e000      	b.n	80089a8 <find_volume+0x1a4>
 80089a6:	2303      	movs	r3, #3
 80089a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80089ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d905      	bls.n	80089c0 <find_volume+0x1bc>
 80089b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b6:	3301      	adds	r3, #1
 80089b8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d9e2      	bls.n	8008986 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80089c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d101      	bne.n	80089cc <find_volume+0x1c8>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e191      	b.n	8008cf0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80089cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d901      	bls.n	80089d8 <find_volume+0x1d4>
 80089d4:	230d      	movs	r3, #13
 80089d6:	e18b      	b.n	8008cf0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	3338      	adds	r3, #56	; 0x38
 80089dc:	330b      	adds	r3, #11
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fd fe06 	bl	80065f0 <ld_word>
 80089e4:	4603      	mov	r3, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	899b      	ldrh	r3, [r3, #12]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d001      	beq.n	80089f4 <find_volume+0x1f0>
 80089f0:	230d      	movs	r3, #13
 80089f2:	e17d      	b.n	8008cf0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	3338      	adds	r3, #56	; 0x38
 80089f8:	3316      	adds	r3, #22
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fd fdf8 	bl	80065f0 <ld_word>
 8008a00:	4603      	mov	r3, r0
 8008a02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <find_volume+0x214>
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	3338      	adds	r3, #56	; 0x38
 8008a0e:	3324      	adds	r3, #36	; 0x24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fd fe05 	bl	8006620 <ld_dword>
 8008a16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a1c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	789b      	ldrb	r3, [r3, #2]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d005      	beq.n	8008a3c <find_volume+0x238>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d001      	beq.n	8008a3c <find_volume+0x238>
 8008a38:	230d      	movs	r3, #13
 8008a3a:	e159      	b.n	8008cf0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	789b      	ldrb	r3, [r3, #2]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
 8008a48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	895b      	ldrh	r3, [r3, #10]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <find_volume+0x26c>
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	895b      	ldrh	r3, [r3, #10]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	895b      	ldrh	r3, [r3, #10]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <find_volume+0x270>
 8008a70:	230d      	movs	r3, #13
 8008a72:	e13d      	b.n	8008cf0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	3338      	adds	r3, #56	; 0x38
 8008a78:	3311      	adds	r3, #17
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fd fdb8 	bl	80065f0 <ld_word>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	891b      	ldrh	r3, [r3, #8]
 8008a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8e:	8992      	ldrh	r2, [r2, #12]
 8008a90:	0952      	lsrs	r2, r2, #5
 8008a92:	b292      	uxth	r2, r2
 8008a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a98:	fb01 f202 	mul.w	r2, r1, r2
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <find_volume+0x2a8>
 8008aa4:	230d      	movs	r3, #13
 8008aa6:	e123      	b.n	8008cf0 <find_volume+0x4ec>
 8008aa8:	2001244c 	.word	0x2001244c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	3338      	adds	r3, #56	; 0x38
 8008ab0:	3313      	adds	r3, #19
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fd fd9c 	bl	80065f0 <ld_word>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <find_volume+0x2cc>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	3338      	adds	r3, #56	; 0x38
 8008ac6:	3320      	adds	r3, #32
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fd fda9 	bl	8006620 <ld_dword>
 8008ace:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	3338      	adds	r3, #56	; 0x38
 8008ad4:	330e      	adds	r3, #14
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fd fd8a 	bl	80065f0 <ld_word>
 8008adc:	4603      	mov	r3, r0
 8008ade:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <find_volume+0x2e6>
 8008ae6:	230d      	movs	r3, #13
 8008ae8:	e102      	b.n	8008cf0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008aea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aee:	4413      	add	r3, r2
 8008af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af2:	8911      	ldrh	r1, [r2, #8]
 8008af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af6:	8992      	ldrh	r2, [r2, #12]
 8008af8:	0952      	lsrs	r2, r2, #5
 8008afa:	b292      	uxth	r2, r2
 8008afc:	fbb1 f2f2 	udiv	r2, r1, r2
 8008b00:	b292      	uxth	r2, r2
 8008b02:	4413      	add	r3, r2
 8008b04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d201      	bcs.n	8008b12 <find_volume+0x30e>
 8008b0e:	230d      	movs	r3, #13
 8008b10:	e0ee      	b.n	8008cf0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b1a:	8952      	ldrh	r2, [r2, #10]
 8008b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <find_volume+0x328>
 8008b28:	230d      	movs	r3, #13
 8008b2a:	e0e1      	b.n	8008cf0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d802      	bhi.n	8008b42 <find_volume+0x33e>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d802      	bhi.n	8008b52 <find_volume+0x34e>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	1c9a      	adds	r2, r3, #2
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008b60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b64:	441a      	add	r2, r3
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008b6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	441a      	add	r2, r3
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d11e      	bne.n	8008bba <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	332a      	adds	r3, #42	; 0x2a
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd fd34 	bl	80065f0 <ld_word>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <find_volume+0x38e>
 8008b8e:	230d      	movs	r3, #13
 8008b90:	e0ae      	b.n	8008cf0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	891b      	ldrh	r3, [r3, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <find_volume+0x39a>
 8008b9a:	230d      	movs	r3, #13
 8008b9c:	e0a8      	b.n	8008cf0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	3338      	adds	r3, #56	; 0x38
 8008ba2:	332c      	adds	r3, #44	; 0x2c
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fd fd3b 	bl	8006620 <ld_dword>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb8:	e01f      	b.n	8008bfa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	891b      	ldrh	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <find_volume+0x3c2>
 8008bc2:	230d      	movs	r3, #13
 8008bc4:	e094      	b.n	8008cf0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bcc:	441a      	add	r2, r3
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d103      	bne.n	8008be2 <find_volume+0x3de>
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	005b      	lsls	r3, r3, #1
 8008be0:	e00a      	b.n	8008bf8 <find_volume+0x3f4>
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	69da      	ldr	r2, [r3, #28]
 8008be6:	4613      	mov	r3, r2
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4413      	add	r3, r2
 8008bec:	085a      	lsrs	r2, r3, #1
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008bf8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	6a1a      	ldr	r2, [r3, #32]
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	899b      	ldrh	r3, [r3, #12]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c06:	440b      	add	r3, r1
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c0c:	8989      	ldrh	r1, [r1, #12]
 8008c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d201      	bcs.n	8008c1a <find_volume+0x416>
 8008c16:	230d      	movs	r3, #13
 8008c18:	e06a      	b.n	8008cf0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	619a      	str	r2, [r3, #24]
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2280      	movs	r2, #128	; 0x80
 8008c2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d149      	bne.n	8008ccc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	3338      	adds	r3, #56	; 0x38
 8008c3c:	3330      	adds	r3, #48	; 0x30
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fd fcd6 	bl	80065f0 <ld_word>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d140      	bne.n	8008ccc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c52:	f7fd ff7d 	bl	8006b50 <move_window>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d137      	bne.n	8008ccc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2200      	movs	r2, #0
 8008c60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	3338      	adds	r3, #56	; 0x38
 8008c66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fd fcc0 	bl	80065f0 <ld_word>
 8008c70:	4603      	mov	r3, r0
 8008c72:	461a      	mov	r2, r3
 8008c74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d127      	bne.n	8008ccc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	3338      	adds	r3, #56	; 0x38
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fd fccd 	bl	8006620 <ld_dword>
 8008c86:	4603      	mov	r3, r0
 8008c88:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <find_volume+0x4f4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d11e      	bne.n	8008ccc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fd fcc2 	bl	8006620 <ld_dword>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <find_volume+0x4f8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d113      	bne.n	8008ccc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca6:	3338      	adds	r3, #56	; 0x38
 8008ca8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fd fcb7 	bl	8006620 <ld_dword>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	3338      	adds	r3, #56	; 0x38
 8008cbc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd fcad 	bl	8006620 <ld_dword>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008cd2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <find_volume+0x4fc>)
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <find_volume+0x4fc>)
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <find_volume+0x4fc>)
 8008ce2:	881a      	ldrh	r2, [r3, #0]
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cea:	f7fd fec9 	bl	8006a80 <clear_lock>
#endif
	return FR_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3758      	adds	r7, #88	; 0x58
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	41615252 	.word	0x41615252
 8008cfc:	61417272 	.word	0x61417272
 8008d00:	20012450 	.word	0x20012450

08008d04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d0e:	2309      	movs	r3, #9
 8008d10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01c      	beq.n	8008d52 <validate+0x4e>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d018      	beq.n	8008d52 <validate+0x4e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d013      	beq.n	8008d52 <validate+0x4e>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	889a      	ldrh	r2, [r3, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	88db      	ldrh	r3, [r3, #6]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d10c      	bne.n	8008d52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	785b      	ldrb	r3, [r3, #1]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd fbb8 	bl	80064b4 <disk_status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <validate+0x4e>
			res = FR_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <validate+0x5a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	e000      	b.n	8008d60 <validate+0x5c>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	6013      	str	r3, [r2, #0]
	return res;
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008d82:	f107 0310 	add.w	r3, r7, #16
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff fca2 	bl	80086d0 <get_ldnumber>
 8008d8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	da01      	bge.n	8008d98 <f_mount+0x28>
 8008d94:	230b      	movs	r3, #11
 8008d96:	e02b      	b.n	8008df0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008d98:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <f_mount+0x88>)
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008da8:	69b8      	ldr	r0, [r7, #24]
 8008daa:	f7fd fe69 	bl	8006a80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2200      	movs	r2, #0
 8008db2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	490d      	ldr	r1, [pc, #52]	; (8008df8 <f_mount+0x88>)
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <f_mount+0x66>
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d001      	beq.n	8008dda <f_mount+0x6a>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e00a      	b.n	8008df0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008dda:	f107 010c 	add.w	r1, r7, #12
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	2200      	movs	r2, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fd0d 	bl	8008804 <find_volume>
 8008dea:	4603      	mov	r3, r0
 8008dec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3720      	adds	r7, #32
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	2001244c 	.word	0x2001244c

08008dfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008e0c:	6018      	str	r0, [r3, #0]
 8008e0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e12:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8008e16:	6019      	str	r1, [r3, #0]
 8008e18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e1c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008e20:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <f_open+0x38>
 8008e30:	2309      	movs	r3, #9
 8008e32:	e2a6      	b.n	8009382 <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e38:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008e3c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008e40:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8008e44:	7812      	ldrb	r2, [r2, #0]
 8008e46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008e4a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008e4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e50:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008e54:	781a      	ldrb	r2, [r3, #0]
 8008e56:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8008e5a:	f107 0308 	add.w	r3, r7, #8
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fcd0 	bl	8008804 <find_volume>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8008e6a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f040 827a 	bne.w	8009368 <f_open+0x56c>
		dj.obj.fs = fs;
 8008e74:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008e78:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 8008e7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008e80:	f107 0210 	add.w	r2, r7, #16
 8008e84:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fba4 	bl	80085e4 <follow_path>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ea2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d11e      	bne.n	8008ee8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008eaa:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8008eae:	b25b      	sxtb	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da03      	bge.n	8008ebc <f_open+0xc0>
				res = FR_INVALID_NAME;
 8008eb4:	2306      	movs	r3, #6
 8008eb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008eba:	e015      	b.n	8008ee8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ebc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ec0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd fc87 	bl	80067f0 <chk_lock>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ee8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008eec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	f003 031c 	and.w	r3, r3, #28
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80a7 	beq.w	800904a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8008efc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01f      	beq.n	8008f44 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f04:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d10e      	bne.n	8008f2a <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f0c:	f7fd fccc 	bl	80068a8 <enq_lock>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d006      	beq.n	8008f24 <f_open+0x128>
 8008f16:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe ff32 	bl	8007d84 <dir_register>
 8008f20:	4603      	mov	r3, r0
 8008f22:	e000      	b.n	8008f26 <f_open+0x12a>
 8008f24:	2312      	movs	r3, #18
 8008f26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f2e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008f32:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008f36:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8008f3a:	7812      	ldrb	r2, [r2, #0]
 8008f3c:	f042 0208 	orr.w	r2, r2, #8
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	e015      	b.n	8008f70 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f44:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8008f48:	f003 0311 	and.w	r3, r3, #17
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <f_open+0x15c>
					res = FR_DENIED;
 8008f50:	2307      	movs	r3, #7
 8008f52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008f56:	e00b      	b.n	8008f70 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f5c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <f_open+0x174>
 8008f6a:	2308      	movs	r3, #8
 8008f6c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f70:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f040 8088 	bne.w	800908a <f_open+0x28e>
 8008f7a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f7e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d07e      	beq.n	800908a <f_open+0x28e>
				dw = GET_FATTIME();
 8008f8c:	f7fd f838 	bl	8006000 <get_fattime>
 8008f90:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f94:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008f98:	330e      	adds	r3, #14
 8008f9a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd fb7c 	bl	800669c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008fa4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008fa8:	3316      	adds	r3, #22
 8008faa:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fd fb74 	bl	800669c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008fb4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008fb8:	330b      	adds	r3, #11
 8008fba:	2220      	movs	r2, #32
 8008fbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008fbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008fc2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe fb49 	bl	8007660 <ld_clust>
 8008fce:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008fd2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008fd6:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fb5e 	bl	800769e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008fe2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008fe6:	331c      	adds	r3, #28
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fd fb56 	bl	800669c <st_dword>
					fs->wflag = 1;
 8008ff0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ff8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d044      	beq.n	800908a <f_open+0x28e>
						dw = fs->winsect;
 8009000:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009006:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800900a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800900e:	2200      	movs	r2, #0
 8009010:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe f848 	bl	80070aa <remove_chain>
 800901a:	4603      	mov	r3, r0
 800901c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8009020:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8009024:	2b00      	cmp	r3, #0
 8009026:	d130      	bne.n	800908a <f_open+0x28e>
							res = move_window(fs, dw);
 8009028:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800902c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8009030:	4618      	mov	r0, r3
 8009032:	f7fd fd8d 	bl	8006b50 <move_window>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800903c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009040:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8009044:	3a01      	subs	r2, #1
 8009046:	615a      	str	r2, [r3, #20]
 8009048:	e01f      	b.n	800908a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800904a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800904e:	2b00      	cmp	r3, #0
 8009050:	d11b      	bne.n	800908a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009052:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <f_open+0x26a>
					res = FR_NO_FILE;
 800905e:	2304      	movs	r3, #4
 8009060:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8009064:	e011      	b.n	800908a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009066:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800906a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <f_open+0x28e>
 8009078:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <f_open+0x28e>
						res = FR_DENIED;
 8009084:	2307      	movs	r3, #7
 8009086:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800908a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800908e:	2b00      	cmp	r3, #0
 8009090:	d14a      	bne.n	8009128 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009092:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009096:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	f003 0308 	and.w	r3, r3, #8
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <f_open+0x2c0>
				mode |= FA_MODIFIED;
 80090a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090a8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80090ac:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80090b0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80090b4:	7812      	ldrb	r2, [r2, #0]
 80090b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ba:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80090bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80090c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80090ce:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80090d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090e2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf14      	ite	ne
 80090f0:	2301      	movne	r3, #1
 80090f2:	2300      	moveq	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	461a      	mov	r2, r3
 80090f8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fd fbf4 	bl	80068ec <inc_lock>
 8009104:	4602      	mov	r2, r0
 8009106:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800910a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009112:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009116:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d102      	bne.n	8009128 <f_open+0x32c>
 8009122:	2302      	movs	r3, #2
 8009124:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009128:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 811b 	bne.w	8009368 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009132:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009136:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fa8f 	bl	8007660 <ld_clust>
 8009142:	4602      	mov	r2, r0
 8009144:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009148:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009150:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8009154:	331c      	adds	r3, #28
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fa62 	bl	8006620 <ld_dword>
 800915c:	4602      	mov	r2, r0
 800915e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009162:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800916a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800916e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2200      	movs	r2, #0
 8009176:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009178:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800917c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009180:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009188:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800918c:	88da      	ldrh	r2, [r3, #6]
 800918e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009192:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800919a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800919e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80091a8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80091b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2200      	movs	r2, #0
 80091bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80091be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2200      	movs	r2, #0
 80091ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80091cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2200      	movs	r2, #0
 80091d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80091da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3330      	adds	r3, #48	; 0x30
 80091e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80091ea:	2100      	movs	r1, #0
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd faa2 	bl	8006736 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80091f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091f6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80b1 	beq.w	8009368 <f_open+0x56c>
 8009206:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800920a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80a8 	beq.w	8009368 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009218:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800921c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009228:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009230:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009234:	895b      	ldrh	r3, [r3, #10]
 8009236:	461a      	mov	r2, r3
 8009238:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800923c:	899b      	ldrh	r3, [r3, #12]
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009246:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800924a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009256:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800925a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8009266:	e021      	b.n	80092ac <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8009268:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800926c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8009276:	4618      	mov	r0, r3
 8009278:	f7fd fd27 	bl	8006cca <get_fat>
 800927c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8009280:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009284:	2b01      	cmp	r3, #1
 8009286:	d802      	bhi.n	800928e <f_open+0x492>
 8009288:	2302      	movs	r3, #2
 800928a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800928e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d102      	bne.n	800929e <f_open+0x4a2>
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800929e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80092a2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80092ac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d105      	bne.n	80092c0 <f_open+0x4c4>
 80092b4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80092b8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80092bc:	429a      	cmp	r2, r3
 80092be:	d8d3      	bhi.n	8009268 <f_open+0x46c>
				}
				fp->clust = clst;
 80092c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80092ce:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80092d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d147      	bne.n	8009368 <f_open+0x56c>
 80092d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80092dc:	899b      	ldrh	r3, [r3, #12]
 80092de:	461a      	mov	r2, r3
 80092e0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80092e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e8:	fb01 f202 	mul.w	r2, r1, r2
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d03a      	beq.n	8009368 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80092f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80092f6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fd fcc6 	bl	8006c8c <clust2sect>
 8009300:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8009304:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d103      	bne.n	8009314 <f_open+0x518>
						res = FR_INT_ERR;
 800930c:	2302      	movs	r3, #2
 800930e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8009312:	e029      	b.n	8009368 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009314:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009318:	899b      	ldrh	r3, [r3, #12]
 800931a:	461a      	mov	r2, r3
 800931c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8009320:	fbb3 f2f2 	udiv	r2, r3, r2
 8009324:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009328:	441a      	add	r2, r3
 800932a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800932e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009336:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800933a:	7858      	ldrb	r0, [r3, #1]
 800933c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009340:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800934a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800934e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6a1a      	ldr	r2, [r3, #32]
 8009356:	2301      	movs	r3, #1
 8009358:	f7fd f8ec 	bl	8006534 <disk_read>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <f_open+0x56c>
 8009362:	2301      	movs	r3, #1
 8009364:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009368:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800936c:	2b00      	cmp	r3, #0
 800936e:	d006      	beq.n	800937e <f_open+0x582>
 8009370:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009374:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800937e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8009382:	4618      	mov	r0, r3
 8009384:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08e      	sub	sp, #56	; 0x38
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f107 0214 	add.w	r2, r7, #20
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff fca9 	bl	8008d04 <validate>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80093b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d107      	bne.n	80093d0 <f_read+0x44>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	7d5b      	ldrb	r3, [r3, #21]
 80093c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80093c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <f_read+0x4a>
 80093d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093d4:	e135      	b.n	8009642 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	7d1b      	ldrb	r3, [r3, #20]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <f_read+0x5a>
 80093e2:	2307      	movs	r3, #7
 80093e4:	e12d      	b.n	8009642 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	f240 811e 	bls.w	8009638 <f_read+0x2ac>
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009400:	e11a      	b.n	8009638 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	8992      	ldrh	r2, [r2, #12]
 800940a:	fbb3 f1f2 	udiv	r1, r3, r2
 800940e:	fb01 f202 	mul.w	r2, r1, r2
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	2b00      	cmp	r3, #0
 8009416:	f040 80d5 	bne.w	80095c4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	8992      	ldrh	r2, [r2, #12]
 8009422:	fbb3 f3f2 	udiv	r3, r3, r2
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	8952      	ldrh	r2, [r2, #10]
 800942a:	3a01      	subs	r2, #1
 800942c:	4013      	ands	r3, r2
 800942e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d12f      	bne.n	8009496 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d103      	bne.n	8009446 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	633b      	str	r3, [r7, #48]	; 0x30
 8009444:	e013      	b.n	800946e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	4619      	mov	r1, r3
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7fd ff25 	bl	80072a4 <clmt_clust>
 800945a:	6338      	str	r0, [r7, #48]	; 0x30
 800945c:	e007      	b.n	800946e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fd fc2f 	bl	8006cca <get_fat>
 800946c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2b01      	cmp	r3, #1
 8009472:	d804      	bhi.n	800947e <f_read+0xf2>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2202      	movs	r2, #2
 8009478:	755a      	strb	r2, [r3, #21]
 800947a:	2302      	movs	r3, #2
 800947c:	e0e1      	b.n	8009642 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d104      	bne.n	8009490 <f_read+0x104>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2201      	movs	r2, #1
 800948a:	755a      	strb	r2, [r3, #21]
 800948c:	2301      	movs	r3, #1
 800948e:	e0d8      	b.n	8009642 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009494:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fd fbf4 	bl	8006c8c <clust2sect>
 80094a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <f_read+0x12a>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2202      	movs	r2, #2
 80094b0:	755a      	strb	r2, [r3, #21]
 80094b2:	2302      	movs	r3, #2
 80094b4:	e0c5      	b.n	8009642 <f_read+0x2b6>
			sect += csect;
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	4413      	add	r3, r2
 80094bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	899b      	ldrh	r3, [r3, #12]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d041      	beq.n	8009556 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	4413      	add	r3, r2
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	8952      	ldrh	r2, [r2, #10]
 80094dc:	4293      	cmp	r3, r2
 80094de:	d905      	bls.n	80094ec <f_read+0x160>
					cc = fs->csize - csect;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	895b      	ldrh	r3, [r3, #10]
 80094e4:	461a      	mov	r2, r3
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	7858      	ldrb	r0, [r3, #1]
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094f6:	f7fd f81d 	bl	8006534 <disk_read>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <f_read+0x17e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	755a      	strb	r2, [r3, #21]
 8009506:	2301      	movs	r3, #1
 8009508:	e09b      	b.n	8009642 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	7d1b      	ldrb	r3, [r3, #20]
 800950e:	b25b      	sxtb	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	da18      	bge.n	8009546 <f_read+0x1ba>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a1a      	ldr	r2, [r3, #32]
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800951e:	429a      	cmp	r2, r3
 8009520:	d911      	bls.n	8009546 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a1a      	ldr	r2, [r3, #32]
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	8992      	ldrh	r2, [r2, #12]
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009534:	18d0      	adds	r0, r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	899b      	ldrh	r3, [r3, #12]
 8009540:	461a      	mov	r2, r3
 8009542:	f7fd f8d7 	bl	80066f4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	899b      	ldrh	r3, [r3, #12]
 800954a:	461a      	mov	r2, r3
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	fb02 f303 	mul.w	r3, r2, r3
 8009552:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009554:	e05c      	b.n	8009610 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	d02e      	beq.n	80095be <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	7d1b      	ldrb	r3, [r3, #20]
 8009564:	b25b      	sxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	da18      	bge.n	800959c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	7858      	ldrb	r0, [r3, #1]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	2301      	movs	r3, #1
 800957a:	f7fc fffb 	bl	8006574 <disk_write>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <f_read+0x202>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	755a      	strb	r2, [r3, #21]
 800958a:	2301      	movs	r3, #1
 800958c:	e059      	b.n	8009642 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	7d1b      	ldrb	r3, [r3, #20]
 8009592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009596:	b2da      	uxtb	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	7858      	ldrb	r0, [r3, #1]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095a6:	2301      	movs	r3, #1
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	f7fc ffc3 	bl	8006534 <disk_read>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <f_read+0x232>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	755a      	strb	r2, [r3, #21]
 80095ba:	2301      	movs	r3, #1
 80095bc:	e041      	b.n	8009642 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	899b      	ldrh	r3, [r3, #12]
 80095c8:	4618      	mov	r0, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	8992      	ldrh	r2, [r2, #12]
 80095d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80095d6:	fb01 f202 	mul.w	r2, r1, r2
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	1ac3      	subs	r3, r0, r3
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80095e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d901      	bls.n	80095ec <f_read+0x260>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	8992      	ldrh	r2, [r2, #12]
 80095fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80095fe:	fb00 f202 	mul.w	r2, r0, r2
 8009602:	1a9b      	subs	r3, r3, r2
 8009604:	440b      	add	r3, r1
 8009606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009608:	4619      	mov	r1, r3
 800960a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800960c:	f7fd f872 	bl	80066f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009614:	4413      	add	r3, r2
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	699a      	ldr	r2, [r3, #24]
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	441a      	add	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	619a      	str	r2, [r3, #24]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962a:	441a      	add	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f47f aee1 	bne.w	8009402 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3738      	adds	r7, #56	; 0x38
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f107 0208 	add.w	r2, r7, #8
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fb52 	bl	8008d04 <validate>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d168      	bne.n	800973c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7d1b      	ldrb	r3, [r3, #20]
 800966e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009672:	2b00      	cmp	r3, #0
 8009674:	d062      	beq.n	800973c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	b25b      	sxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	da15      	bge.n	80096ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	7858      	ldrb	r0, [r3, #1]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1a      	ldr	r2, [r3, #32]
 800968e:	2301      	movs	r3, #1
 8009690:	f7fc ff70 	bl	8006574 <disk_write>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <f_sync+0x54>
 800969a:	2301      	movs	r3, #1
 800969c:	e04f      	b.n	800973e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7d1b      	ldrb	r3, [r3, #20]
 80096a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80096ac:	f7fc fca8 	bl	8006000 <get_fattime>
 80096b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fd fa48 	bl	8006b50 <move_window>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d138      	bne.n	800973c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	330b      	adds	r3, #11
 80096d4:	781a      	ldrb	r2, [r3, #0]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	330b      	adds	r3, #11
 80096da:	f042 0220 	orr.w	r2, r2, #32
 80096de:	b2d2      	uxtb	r2, r2
 80096e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	461a      	mov	r2, r3
 80096ec:	68f9      	ldr	r1, [r7, #12]
 80096ee:	f7fd ffd6 	bl	800769e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f103 021c 	add.w	r2, r3, #28
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fc ffcc 	bl	800669c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3316      	adds	r3, #22
 8009708:	6939      	ldr	r1, [r7, #16]
 800970a:	4618      	mov	r0, r3
 800970c:	f7fc ffc6 	bl	800669c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3312      	adds	r3, #18
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f7fc ffa5 	bl	8006666 <st_word>
					fs->wflag = 1;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2201      	movs	r2, #1
 8009720:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	4618      	mov	r0, r3
 8009726:	f7fd fa41 	bl	8006bac <sync_fs>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7d1b      	ldrb	r3, [r3, #20]
 8009732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009736:	b2da      	uxtb	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800973c:	7dfb      	ldrb	r3, [r7, #23]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff ff7b 	bl	800964a <f_sync>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d118      	bne.n	8009790 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f107 0208 	add.w	r2, r7, #8
 8009764:	4611      	mov	r1, r2
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff facc 	bl	8008d04 <validate>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10c      	bne.n	8009790 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd f944 	bl	8006a08 <dec_lock>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009790:	7bfb      	ldrb	r3, [r7, #15]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80097a6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80097aa:	6018      	str	r0, [r3, #0]
 80097ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80097b0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80097b4:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80097b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80097ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d101      	bne.n	80097c8 <f_opendir+0x2e>
 80097c4:	2309      	movs	r3, #9
 80097c6:	e0a0      	b.n	800990a <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 80097c8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80097cc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80097d6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80097da:	463b      	mov	r3, r7
 80097dc:	2200      	movs	r2, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f7ff f810 	bl	8008804 <find_volume>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 80097ea:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 8081 	bne.w	80098f6 <f_opendir+0x15c>
		obj->fs = fs;
 80097f4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80097f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80097fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80097fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009802:	f107 020c 	add.w	r2, r7, #12
 8009806:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009808:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800980c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8009816:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800981a:	4611      	mov	r1, r2
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	f7fe fee1 	bl	80085e4 <follow_path>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8009828:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800982c:	2b00      	cmp	r3, #0
 800982e:	d15b      	bne.n	80098e8 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009830:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8009834:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800983e:	b25b      	sxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	db1a      	blt.n	800987a <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009844:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009848:	799b      	ldrb	r3, [r3, #6]
 800984a:	f003 0310 	and.w	r3, r3, #16
 800984e:	2b00      	cmp	r3, #0
 8009850:	d010      	beq.n	8009874 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009852:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8009856:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800985a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fd fefb 	bl	8007660 <ld_clust>
 800986a:	4602      	mov	r2, r0
 800986c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009870:	609a      	str	r2, [r3, #8]
 8009872:	e002      	b.n	800987a <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009874:	2305      	movs	r3, #5
 8009876:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800987a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800987e:	2b00      	cmp	r3, #0
 8009880:	d132      	bne.n	80098e8 <f_opendir+0x14e>
				obj->id = fs->id;
 8009882:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009886:	88da      	ldrh	r2, [r3, #6]
 8009888:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800988c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800988e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8009892:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8009896:	2100      	movs	r1, #0
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	f7fd fd3b 	bl	8007314 <dir_sdi>
 800989e:	4603      	mov	r3, r0
 80098a0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80098a4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11d      	bne.n	80098e8 <f_opendir+0x14e>
					if (obj->sclust) {
 80098ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d014      	beq.n	80098e0 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80098b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80098ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80098be:	2100      	movs	r1, #0
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	f7fd f813 	bl	80068ec <inc_lock>
 80098c6:	4602      	mov	r2, r0
 80098c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80098cc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80098ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d107      	bne.n	80098e8 <f_opendir+0x14e>
 80098d8:	2312      	movs	r3, #18
 80098da:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80098de:	e003      	b.n	80098e8 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80098e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80098e4:	2200      	movs	r2, #0
 80098e6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80098e8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d102      	bne.n	80098f6 <f_opendir+0x15c>
 80098f0:	2305      	movs	r3, #5
 80098f2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80098f6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <f_opendir+0x16c>
 80098fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009906:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800990a:	4618      	mov	r0, r3
 800990c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800991a:	af00      	add	r7, sp, #0
 800991c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009920:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009924:	6018      	str	r0, [r3, #0]
 8009926:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800992a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800992e:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009930:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009934:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff f9df 	bl	8008d04 <validate>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800994c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8009950:	2b00      	cmp	r3, #0
 8009952:	d14b      	bne.n	80099ec <f_readdir+0xd8>
		if (!fno) {
 8009954:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009958:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10b      	bne.n	800997a <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009962:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009966:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800996a:	2100      	movs	r1, #0
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f7fd fcd1 	bl	8007314 <dir_sdi>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8009978:	e038      	b.n	80099ec <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800997a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800997e:	f107 0208 	add.w	r2, r7, #8
 8009982:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 8009984:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009988:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800998c:	2100      	movs	r1, #0
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	f7fe f891 	bl	8007ab6 <dir_read>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800999a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d102      	bne.n	80099a8 <f_readdir+0x94>
 80099a2:	2300      	movs	r3, #0
 80099a4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 80099a8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11d      	bne.n	80099ec <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 80099b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80099b4:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80099b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80099bc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80099c0:	6811      	ldr	r1, [r2, #0]
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	f7fe fad6 	bl	8007f74 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80099c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80099cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80099d0:	2100      	movs	r1, #0
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	f7fd fd27 	bl	8007426 <dir_next>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80099de:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d102      	bne.n	80099ec <f_readdir+0xd8>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80099ec:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff ff84 	bl	8009914 <f_readdir>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d114      	bne.n	8009a40 <f_findnext+0x46>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d011      	beq.n	8009a40 <f_findnext+0x46>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	7d9b      	ldrb	r3, [r3, #22]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00d      	beq.n	8009a40 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f103 0116 	add.w	r1, r3, #22
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	f7fe fba3 	bl	800817c <pattern_matching>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d100      	bne.n	8009a3e <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8009a3c:	e7e2      	b.n	8009a04 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8009a3e:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b086      	sub	sp, #24
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f7ff fe9a 	bl	800979a <f_opendir>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d105      	bne.n	8009a7c <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8009a70:	68b9      	ldr	r1, [r7, #8]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f7ff ffc1 	bl	80099fa <f_findnext>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	4613      	mov	r3, r2
 8009a94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a96:	2301      	movs	r3, #1
 8009a98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a9e:	4b1f      	ldr	r3, [pc, #124]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009aa0:	7a5b      	ldrb	r3, [r3, #9]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d131      	bne.n	8009b0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009aa8:	4b1c      	ldr	r3, [pc, #112]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009aaa:	7a5b      	ldrb	r3, [r3, #9]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4b1a      	ldr	r3, [pc, #104]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ab6:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009ab8:	7a5b      	ldrb	r3, [r3, #9]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	4a17      	ldr	r2, [pc, #92]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009ac6:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009ac8:	7a5b      	ldrb	r3, [r3, #9]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009ad0:	4413      	add	r3, r2
 8009ad2:	79fa      	ldrb	r2, [r7, #7]
 8009ad4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ad6:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009ad8:	7a5b      	ldrb	r3, [r3, #9]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	b2d1      	uxtb	r1, r2
 8009ae0:	4a0e      	ldr	r2, [pc, #56]	; (8009b1c <FATFS_LinkDriverEx+0x94>)
 8009ae2:	7251      	strb	r1, [r2, #9]
 8009ae4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ae6:	7dbb      	ldrb	r3, [r7, #22]
 8009ae8:	3330      	adds	r3, #48	; 0x30
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	3301      	adds	r3, #1
 8009af4:	223a      	movs	r2, #58	; 0x3a
 8009af6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	3302      	adds	r3, #2
 8009afc:	222f      	movs	r2, #47	; 0x2f
 8009afe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	3303      	adds	r3, #3
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20012474 	.word	0x20012474

08009b20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff ffaa 	bl	8009a88 <FATFS_LinkDriverEx>
 8009b34:	4603      	mov	r3, r0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8009b54:	4b15      	ldr	r3, [pc, #84]	; (8009bac <FATFS_UnLinkDriverEx+0x6c>)
 8009b56:	7a5b      	ldrb	r3, [r3, #9]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d01e      	beq.n	8009b9c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	3b30      	subs	r3, #48	; 0x30
 8009b64:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	4a10      	ldr	r2, [pc, #64]	; (8009bac <FATFS_UnLinkDriverEx+0x6c>)
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d013      	beq.n	8009b9c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	4a0d      	ldr	r2, [pc, #52]	; (8009bac <FATFS_UnLinkDriverEx+0x6c>)
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	4a0a      	ldr	r2, [pc, #40]	; (8009bac <FATFS_UnLinkDriverEx+0x6c>)
 8009b84:	4413      	add	r3, r2
 8009b86:	2200      	movs	r2, #0
 8009b88:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <FATFS_UnLinkDriverEx+0x6c>)
 8009b8c:	7a5b      	ldrb	r3, [r3, #9]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <FATFS_UnLinkDriverEx+0x6c>)
 8009b96:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20012474 	.word	0x20012474

08009bb0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ffc0 	bl	8009b40 <FATFS_UnLinkDriverEx>
 8009bc0:	4603      	mov	r3, r0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009bd8:	88fb      	ldrh	r3, [r7, #6]
 8009bda:	2b7f      	cmp	r3, #127	; 0x7f
 8009bdc:	d802      	bhi.n	8009be4 <ff_convert+0x18>
		c = chr;
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	81fb      	strh	r3, [r7, #14]
 8009be2:	e025      	b.n	8009c30 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009bea:	88fb      	ldrh	r3, [r7, #6]
 8009bec:	2bff      	cmp	r3, #255	; 0xff
 8009bee:	d805      	bhi.n	8009bfc <ff_convert+0x30>
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	3b80      	subs	r3, #128	; 0x80
 8009bf4:	4a12      	ldr	r2, [pc, #72]	; (8009c40 <ff_convert+0x74>)
 8009bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bfa:	e000      	b.n	8009bfe <ff_convert+0x32>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	81fb      	strh	r3, [r7, #14]
 8009c00:	e016      	b.n	8009c30 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009c02:	2300      	movs	r3, #0
 8009c04:	81fb      	strh	r3, [r7, #14]
 8009c06:	e009      	b.n	8009c1c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009c08:	89fb      	ldrh	r3, [r7, #14]
 8009c0a:	4a0d      	ldr	r2, [pc, #52]	; (8009c40 <ff_convert+0x74>)
 8009c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c10:	88fa      	ldrh	r2, [r7, #6]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d006      	beq.n	8009c24 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009c16:	89fb      	ldrh	r3, [r7, #14]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	81fb      	strh	r3, [r7, #14]
 8009c1c:	89fb      	ldrh	r3, [r7, #14]
 8009c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c20:	d9f2      	bls.n	8009c08 <ff_convert+0x3c>
 8009c22:	e000      	b.n	8009c26 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009c24:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009c26:	89fb      	ldrh	r3, [r7, #14]
 8009c28:	3380      	adds	r3, #128	; 0x80
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009c30:	89fb      	ldrh	r3, [r7, #14]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	08009f10 	.word	0x08009f10

08009c44 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c54:	d201      	bcs.n	8009c5a <ff_wtoupper+0x16>
 8009c56:	4b3e      	ldr	r3, [pc, #248]	; (8009d50 <ff_wtoupper+0x10c>)
 8009c58:	e000      	b.n	8009c5c <ff_wtoupper+0x18>
 8009c5a:	4b3e      	ldr	r3, [pc, #248]	; (8009d54 <ff_wtoupper+0x110>)
 8009c5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	1c9a      	adds	r2, r3, #2
 8009c62:	617a      	str	r2, [r7, #20]
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009c68:	8a7b      	ldrh	r3, [r7, #18]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d068      	beq.n	8009d40 <ff_wtoupper+0xfc>
 8009c6e:	88fa      	ldrh	r2, [r7, #6]
 8009c70:	8a7b      	ldrh	r3, [r7, #18]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d364      	bcc.n	8009d40 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	1c9a      	adds	r2, r3, #2
 8009c7a:	617a      	str	r2, [r7, #20]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	823b      	strh	r3, [r7, #16]
 8009c80:	8a3b      	ldrh	r3, [r7, #16]
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	81fb      	strh	r3, [r7, #14]
 8009c86:	8a3b      	ldrh	r3, [r7, #16]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009c8c:	88fa      	ldrh	r2, [r7, #6]
 8009c8e:	8a79      	ldrh	r1, [r7, #18]
 8009c90:	8a3b      	ldrh	r3, [r7, #16]
 8009c92:	440b      	add	r3, r1
 8009c94:	429a      	cmp	r2, r3
 8009c96:	da49      	bge.n	8009d2c <ff_wtoupper+0xe8>
			switch (cmd) {
 8009c98:	89fb      	ldrh	r3, [r7, #14]
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d84f      	bhi.n	8009d3e <ff_wtoupper+0xfa>
 8009c9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <ff_wtoupper+0x60>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cdb 	.word	0x08009cdb
 8009cac:	08009cf1 	.word	0x08009cf1
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009d01 	.word	0x08009d01
 8009cb8:	08009d09 	.word	0x08009d09
 8009cbc:	08009d11 	.word	0x08009d11
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d21 	.word	0x08009d21
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009cc8:	88fa      	ldrh	r2, [r7, #6]
 8009cca:	8a7b      	ldrh	r3, [r7, #18]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	80fb      	strh	r3, [r7, #6]
 8009cd8:	e027      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009cda:	88fa      	ldrh	r2, [r7, #6]
 8009cdc:	8a7b      	ldrh	r3, [r7, #18]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	88fa      	ldrh	r2, [r7, #6]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	80fb      	strh	r3, [r7, #6]
 8009cee:	e01c      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	3b10      	subs	r3, #16
 8009cf4:	80fb      	strh	r3, [r7, #6]
 8009cf6:	e018      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009cf8:	88fb      	ldrh	r3, [r7, #6]
 8009cfa:	3b20      	subs	r3, #32
 8009cfc:	80fb      	strh	r3, [r7, #6]
 8009cfe:	e014      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	3b30      	subs	r3, #48	; 0x30
 8009d04:	80fb      	strh	r3, [r7, #6]
 8009d06:	e010      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009d08:	88fb      	ldrh	r3, [r7, #6]
 8009d0a:	3b1a      	subs	r3, #26
 8009d0c:	80fb      	strh	r3, [r7, #6]
 8009d0e:	e00c      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	3308      	adds	r3, #8
 8009d14:	80fb      	strh	r3, [r7, #6]
 8009d16:	e008      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	3b50      	subs	r3, #80	; 0x50
 8009d1c:	80fb      	strh	r3, [r7, #6]
 8009d1e:	e004      	b.n	8009d2a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009d20:	88fb      	ldrh	r3, [r7, #6]
 8009d22:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009d26:	80fb      	strh	r3, [r7, #6]
 8009d28:	bf00      	nop
			}
			break;
 8009d2a:	e008      	b.n	8009d3e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009d2c:	89fb      	ldrh	r3, [r7, #14]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d195      	bne.n	8009c5e <ff_wtoupper+0x1a>
 8009d32:	8a3b      	ldrh	r3, [r7, #16]
 8009d34:	005b      	lsls	r3, r3, #1
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	4413      	add	r3, r2
 8009d3a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009d3c:	e78f      	b.n	8009c5e <ff_wtoupper+0x1a>
			break;
 8009d3e:	bf00      	nop
	}

	return chr;
 8009d40:	88fb      	ldrh	r3, [r7, #6]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	0800a010 	.word	0x0800a010
 8009d54:	0800a204 	.word	0x0800a204

08009d58 <__libc_init_array>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4d0d      	ldr	r5, [pc, #52]	; (8009d90 <__libc_init_array+0x38>)
 8009d5c:	4c0d      	ldr	r4, [pc, #52]	; (8009d94 <__libc_init_array+0x3c>)
 8009d5e:	1b64      	subs	r4, r4, r5
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	2600      	movs	r6, #0
 8009d64:	42a6      	cmp	r6, r4
 8009d66:	d109      	bne.n	8009d7c <__libc_init_array+0x24>
 8009d68:	4d0b      	ldr	r5, [pc, #44]	; (8009d98 <__libc_init_array+0x40>)
 8009d6a:	4c0c      	ldr	r4, [pc, #48]	; (8009d9c <__libc_init_array+0x44>)
 8009d6c:	f000 f830 	bl	8009dd0 <_init>
 8009d70:	1b64      	subs	r4, r4, r5
 8009d72:	10a4      	asrs	r4, r4, #2
 8009d74:	2600      	movs	r6, #0
 8009d76:	42a6      	cmp	r6, r4
 8009d78:	d105      	bne.n	8009d86 <__libc_init_array+0x2e>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d80:	4798      	blx	r3
 8009d82:	3601      	adds	r6, #1
 8009d84:	e7ee      	b.n	8009d64 <__libc_init_array+0xc>
 8009d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8a:	4798      	blx	r3
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	e7f2      	b.n	8009d76 <__libc_init_array+0x1e>
 8009d90:	0800a2c8 	.word	0x0800a2c8
 8009d94:	0800a2c8 	.word	0x0800a2c8
 8009d98:	0800a2c8 	.word	0x0800a2c8
 8009d9c:	0800a2cc 	.word	0x0800a2cc

08009da0 <memset>:
 8009da0:	4402      	add	r2, r0
 8009da2:	4603      	mov	r3, r0
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d100      	bne.n	8009daa <memset+0xa>
 8009da8:	4770      	bx	lr
 8009daa:	f803 1b01 	strb.w	r1, [r3], #1
 8009dae:	e7f9      	b.n	8009da4 <memset+0x4>

08009db0 <strcat>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	4602      	mov	r2, r0
 8009db4:	7814      	ldrb	r4, [r2, #0]
 8009db6:	4613      	mov	r3, r2
 8009db8:	3201      	adds	r2, #1
 8009dba:	2c00      	cmp	r4, #0
 8009dbc:	d1fa      	bne.n	8009db4 <strcat+0x4>
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	d1f9      	bne.n	8009dc0 <strcat+0x10>
 8009dcc:	bd10      	pop	{r4, pc}
	...

08009dd0 <_init>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr

08009ddc <_fini>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr
